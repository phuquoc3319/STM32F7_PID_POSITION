
PID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002798  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002990  08002990  00012990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080029ac  080029ac  000129ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000040  20020000  080029b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .dtcmram      00000000  20000000  20000000  00020040  2**0
                  CONTENTS
  8 .sram2        00000000  2007c000  2007c000  00020040  2**0
                  CONTENTS
  9 .bss          0000013c  20020040  20020040  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000400  2002017c  2002017c  00020040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aada  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c0  00000000  00000000  0002ab4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008c0  00000000  00000000  0002c210  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002cad0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003dad  00000000  00000000  0002d2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000032d4  00000000  00000000  00031075  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  00034349  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002300  00000000  00000000  000343c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20020040 	.word	0x20020040
 8000214:	00000000 	.word	0x00000000
 8000218:	08002978 	.word	0x08002978

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20020044 	.word	0x20020044
 8000234:	08002978 	.word	0x08002978

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b97a 	b.w	8000544 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	468c      	mov	ip, r1
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	9e08      	ldr	r6, [sp, #32]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d151      	bne.n	800031c <__udivmoddi4+0xb4>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d96d      	bls.n	800035a <__udivmoddi4+0xf2>
 800027e:	fab2 fe82 	clz	lr, r2
 8000282:	f1be 0f00 	cmp.w	lr, #0
 8000286:	d00b      	beq.n	80002a0 <__udivmoddi4+0x38>
 8000288:	f1ce 0c20 	rsb	ip, lr, #32
 800028c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000290:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000294:	fa02 f70e 	lsl.w	r7, r2, lr
 8000298:	ea4c 0c05 	orr.w	ip, ip, r5
 800029c:	fa00 f40e 	lsl.w	r4, r0, lr
 80002a0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002a4:	0c25      	lsrs	r5, r4, #16
 80002a6:	fbbc f8fa 	udiv	r8, ip, sl
 80002aa:	fa1f f987 	uxth.w	r9, r7
 80002ae:	fb0a cc18 	mls	ip, sl, r8, ip
 80002b2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002b6:	fb08 f309 	mul.w	r3, r8, r9
 80002ba:	42ab      	cmp	r3, r5
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x6c>
 80002be:	19ed      	adds	r5, r5, r7
 80002c0:	f108 32ff 	add.w	r2, r8, #4294967295
 80002c4:	f080 8123 	bcs.w	800050e <__udivmoddi4+0x2a6>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	f240 8120 	bls.w	800050e <__udivmoddi4+0x2a6>
 80002ce:	f1a8 0802 	sub.w	r8, r8, #2
 80002d2:	443d      	add	r5, r7
 80002d4:	1aed      	subs	r5, r5, r3
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0fa 	udiv	r0, r5, sl
 80002dc:	fb0a 5510 	mls	r5, sl, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb00 f909 	mul.w	r9, r0, r9
 80002e8:	45a1      	cmp	r9, r4
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x98>
 80002ec:	19e4      	adds	r4, r4, r7
 80002ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f2:	f080 810a 	bcs.w	800050a <__udivmoddi4+0x2a2>
 80002f6:	45a1      	cmp	r9, r4
 80002f8:	f240 8107 	bls.w	800050a <__udivmoddi4+0x2a2>
 80002fc:	3802      	subs	r0, #2
 80002fe:	443c      	add	r4, r7
 8000300:	eba4 0409 	sub.w	r4, r4, r9
 8000304:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000308:	2100      	movs	r1, #0
 800030a:	2e00      	cmp	r6, #0
 800030c:	d061      	beq.n	80003d2 <__udivmoddi4+0x16a>
 800030e:	fa24 f40e 	lsr.w	r4, r4, lr
 8000312:	2300      	movs	r3, #0
 8000314:	6034      	str	r4, [r6, #0]
 8000316:	6073      	str	r3, [r6, #4]
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	428b      	cmp	r3, r1
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0xc8>
 8000320:	2e00      	cmp	r6, #0
 8000322:	d054      	beq.n	80003ce <__udivmoddi4+0x166>
 8000324:	2100      	movs	r1, #0
 8000326:	e886 0021 	stmia.w	r6, {r0, r5}
 800032a:	4608      	mov	r0, r1
 800032c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000330:	fab3 f183 	clz	r1, r3
 8000334:	2900      	cmp	r1, #0
 8000336:	f040 808e 	bne.w	8000456 <__udivmoddi4+0x1ee>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xdc>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80fa 	bhi.w	8000538 <__udivmoddi4+0x2d0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb65 0503 	sbc.w	r5, r5, r3
 800034a:	2001      	movs	r0, #1
 800034c:	46ac      	mov	ip, r5
 800034e:	2e00      	cmp	r6, #0
 8000350:	d03f      	beq.n	80003d2 <__udivmoddi4+0x16a>
 8000352:	e886 1010 	stmia.w	r6, {r4, ip}
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	b912      	cbnz	r2, 8000362 <__udivmoddi4+0xfa>
 800035c:	2701      	movs	r7, #1
 800035e:	fbb7 f7f2 	udiv	r7, r7, r2
 8000362:	fab7 fe87 	clz	lr, r7
 8000366:	f1be 0f00 	cmp.w	lr, #0
 800036a:	d134      	bne.n	80003d6 <__udivmoddi4+0x16e>
 800036c:	1beb      	subs	r3, r5, r7
 800036e:	0c3a      	lsrs	r2, r7, #16
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	2101      	movs	r1, #1
 8000376:	fbb3 f8f2 	udiv	r8, r3, r2
 800037a:	0c25      	lsrs	r5, r4, #16
 800037c:	fb02 3318 	mls	r3, r2, r8, r3
 8000380:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000384:	fb0c f308 	mul.w	r3, ip, r8
 8000388:	42ab      	cmp	r3, r5
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x134>
 800038c:	19ed      	adds	r5, r5, r7
 800038e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x132>
 8000394:	42ab      	cmp	r3, r5
 8000396:	f200 80d1 	bhi.w	800053c <__udivmoddi4+0x2d4>
 800039a:	4680      	mov	r8, r0
 800039c:	1aed      	subs	r5, r5, r3
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb5 f0f2 	udiv	r0, r5, r2
 80003a4:	fb02 5510 	mls	r5, r2, r0, r5
 80003a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003ac:	fb0c fc00 	mul.w	ip, ip, r0
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x15c>
 80003b4:	19e4      	adds	r4, r4, r7
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x15a>
 80003bc:	45a4      	cmp	ip, r4
 80003be:	f200 80b8 	bhi.w	8000532 <__udivmoddi4+0x2ca>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 040c 	sub.w	r4, r4, ip
 80003c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003cc:	e79d      	b.n	800030a <__udivmoddi4+0xa2>
 80003ce:	4631      	mov	r1, r6
 80003d0:	4630      	mov	r0, r6
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	f1ce 0420 	rsb	r4, lr, #32
 80003da:	fa05 f30e 	lsl.w	r3, r5, lr
 80003de:	fa07 f70e 	lsl.w	r7, r7, lr
 80003e2:	fa20 f804 	lsr.w	r8, r0, r4
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa25 f404 	lsr.w	r4, r5, r4
 80003ec:	ea48 0803 	orr.w	r8, r8, r3
 80003f0:	fbb4 f1f2 	udiv	r1, r4, r2
 80003f4:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003f8:	fb02 4411 	mls	r4, r2, r1, r4
 80003fc:	fa1f fc87 	uxth.w	ip, r7
 8000400:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000404:	fb01 f30c 	mul.w	r3, r1, ip
 8000408:	42ab      	cmp	r3, r5
 800040a:	fa00 f40e 	lsl.w	r4, r0, lr
 800040e:	d909      	bls.n	8000424 <__udivmoddi4+0x1bc>
 8000410:	19ed      	adds	r5, r5, r7
 8000412:	f101 30ff 	add.w	r0, r1, #4294967295
 8000416:	f080 808a 	bcs.w	800052e <__udivmoddi4+0x2c6>
 800041a:	42ab      	cmp	r3, r5
 800041c:	f240 8087 	bls.w	800052e <__udivmoddi4+0x2c6>
 8000420:	3902      	subs	r1, #2
 8000422:	443d      	add	r5, r7
 8000424:	1aeb      	subs	r3, r5, r3
 8000426:	fa1f f588 	uxth.w	r5, r8
 800042a:	fbb3 f0f2 	udiv	r0, r3, r2
 800042e:	fb02 3310 	mls	r3, r2, r0, r3
 8000432:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000436:	fb00 f30c 	mul.w	r3, r0, ip
 800043a:	42ab      	cmp	r3, r5
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1e6>
 800043e:	19ed      	adds	r5, r5, r7
 8000440:	f100 38ff 	add.w	r8, r0, #4294967295
 8000444:	d26f      	bcs.n	8000526 <__udivmoddi4+0x2be>
 8000446:	42ab      	cmp	r3, r5
 8000448:	d96d      	bls.n	8000526 <__udivmoddi4+0x2be>
 800044a:	3802      	subs	r0, #2
 800044c:	443d      	add	r5, r7
 800044e:	1aeb      	subs	r3, r5, r3
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	e78f      	b.n	8000376 <__udivmoddi4+0x10e>
 8000456:	f1c1 0720 	rsb	r7, r1, #32
 800045a:	fa22 f807 	lsr.w	r8, r2, r7
 800045e:	408b      	lsls	r3, r1
 8000460:	fa05 f401 	lsl.w	r4, r5, r1
 8000464:	ea48 0303 	orr.w	r3, r8, r3
 8000468:	fa20 fe07 	lsr.w	lr, r0, r7
 800046c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000470:	40fd      	lsrs	r5, r7
 8000472:	ea4e 0e04 	orr.w	lr, lr, r4
 8000476:	fbb5 f9fc 	udiv	r9, r5, ip
 800047a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800047e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000482:	fa1f f883 	uxth.w	r8, r3
 8000486:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800048a:	fb09 f408 	mul.w	r4, r9, r8
 800048e:	42ac      	cmp	r4, r5
 8000490:	fa02 f201 	lsl.w	r2, r2, r1
 8000494:	fa00 fa01 	lsl.w	sl, r0, r1
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x244>
 800049a:	18ed      	adds	r5, r5, r3
 800049c:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a0:	d243      	bcs.n	800052a <__udivmoddi4+0x2c2>
 80004a2:	42ac      	cmp	r4, r5
 80004a4:	d941      	bls.n	800052a <__udivmoddi4+0x2c2>
 80004a6:	f1a9 0902 	sub.w	r9, r9, #2
 80004aa:	441d      	add	r5, r3
 80004ac:	1b2d      	subs	r5, r5, r4
 80004ae:	fa1f fe8e 	uxth.w	lr, lr
 80004b2:	fbb5 f0fc 	udiv	r0, r5, ip
 80004b6:	fb0c 5510 	mls	r5, ip, r0, r5
 80004ba:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004be:	fb00 f808 	mul.w	r8, r0, r8
 80004c2:	45a0      	cmp	r8, r4
 80004c4:	d907      	bls.n	80004d6 <__udivmoddi4+0x26e>
 80004c6:	18e4      	adds	r4, r4, r3
 80004c8:	f100 35ff 	add.w	r5, r0, #4294967295
 80004cc:	d229      	bcs.n	8000522 <__udivmoddi4+0x2ba>
 80004ce:	45a0      	cmp	r8, r4
 80004d0:	d927      	bls.n	8000522 <__udivmoddi4+0x2ba>
 80004d2:	3802      	subs	r0, #2
 80004d4:	441c      	add	r4, r3
 80004d6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004da:	eba4 0408 	sub.w	r4, r4, r8
 80004de:	fba0 8902 	umull	r8, r9, r0, r2
 80004e2:	454c      	cmp	r4, r9
 80004e4:	46c6      	mov	lr, r8
 80004e6:	464d      	mov	r5, r9
 80004e8:	d315      	bcc.n	8000516 <__udivmoddi4+0x2ae>
 80004ea:	d012      	beq.n	8000512 <__udivmoddi4+0x2aa>
 80004ec:	b156      	cbz	r6, 8000504 <__udivmoddi4+0x29c>
 80004ee:	ebba 030e 	subs.w	r3, sl, lr
 80004f2:	eb64 0405 	sbc.w	r4, r4, r5
 80004f6:	fa04 f707 	lsl.w	r7, r4, r7
 80004fa:	40cb      	lsrs	r3, r1
 80004fc:	431f      	orrs	r7, r3
 80004fe:	40cc      	lsrs	r4, r1
 8000500:	6037      	str	r7, [r6, #0]
 8000502:	6074      	str	r4, [r6, #4]
 8000504:	2100      	movs	r1, #0
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	4618      	mov	r0, r3
 800050c:	e6f8      	b.n	8000300 <__udivmoddi4+0x98>
 800050e:	4690      	mov	r8, r2
 8000510:	e6e0      	b.n	80002d4 <__udivmoddi4+0x6c>
 8000512:	45c2      	cmp	sl, r8
 8000514:	d2ea      	bcs.n	80004ec <__udivmoddi4+0x284>
 8000516:	ebb8 0e02 	subs.w	lr, r8, r2
 800051a:	eb69 0503 	sbc.w	r5, r9, r3
 800051e:	3801      	subs	r0, #1
 8000520:	e7e4      	b.n	80004ec <__udivmoddi4+0x284>
 8000522:	4628      	mov	r0, r5
 8000524:	e7d7      	b.n	80004d6 <__udivmoddi4+0x26e>
 8000526:	4640      	mov	r0, r8
 8000528:	e791      	b.n	800044e <__udivmoddi4+0x1e6>
 800052a:	4681      	mov	r9, r0
 800052c:	e7be      	b.n	80004ac <__udivmoddi4+0x244>
 800052e:	4601      	mov	r1, r0
 8000530:	e778      	b.n	8000424 <__udivmoddi4+0x1bc>
 8000532:	3802      	subs	r0, #2
 8000534:	443c      	add	r4, r7
 8000536:	e745      	b.n	80003c4 <__udivmoddi4+0x15c>
 8000538:	4608      	mov	r0, r1
 800053a:	e708      	b.n	800034e <__udivmoddi4+0xe6>
 800053c:	f1a8 0802 	sub.w	r8, r8, #2
 8000540:	443d      	add	r5, r7
 8000542:	e72b      	b.n	800039c <__udivmoddi4+0x134>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 800054c:	4a0b      	ldr	r2, [pc, #44]	; (800057c <HAL_Init+0x34>)
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <HAL_Init+0x34>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000556:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	4a08      	ldr	r2, [pc, #32]	; (800057c <HAL_Init+0x34>)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_Init+0x34>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000562:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f919 	bl	800079c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	200f      	movs	r0, #15
 800056c:	f000 f810 	bl	8000590 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000570:	f000 f806 	bl	8000580 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40023c00 	.word	0x40023c00

08000580 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x58>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f929 	bl	8000806 <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00e      	b.n	80005dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d80a      	bhi.n	80005da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295
 80005cc:	f000 f8f1 	bl	80007b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_InitTick+0x5c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2002003c 	.word	0x2002003c
 80005e8:	20020004 	.word	0x20020004
 80005ec:	20020000 	.word	0x20020000

080005f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  return uwTick;
 80005f4:	4b03      	ldr	r3, [pc, #12]	; (8000604 <HAL_GetTick+0x14>)
 80005f6:	681b      	ldr	r3, [r3, #0]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	20020060 	.word	0x20020060

08000608 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <NVIC_SetPriorityGrouping+0x40>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <NVIC_SetPriorityGrouping+0x44>)
 8000632:	4313      	orrs	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000636:	4a04      	ldr	r2, [pc, #16]	; (8000648 <NVIC_SetPriorityGrouping+0x40>)
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	60d3      	str	r3, [r2, #12]
}
 800063c:	bf00      	nop
 800063e:	3714      	adds	r7, #20
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr
 8000648:	e000ed00 	.word	0xe000ed00
 800064c:	05fa0000 	.word	0x05fa0000

08000650 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000676:	4909      	ldr	r1, [pc, #36]	; (800069c <NVIC_EnableIRQ+0x30>)
 8000678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067c:	095b      	lsrs	r3, r3, #5
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	f002 021f 	and.w	r2, r2, #31
 8000684:	2001      	movs	r0, #1
 8000686:	fa00 f202 	lsl.w	r2, r0, r2
 800068a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop
 800069c:	e000e100 	.word	0xe000e100

080006a0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	6039      	str	r1, [r7, #0]
 80006aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80006ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	da0b      	bge.n	80006cc <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	490d      	ldr	r1, [pc, #52]	; (80006ec <NVIC_SetPriority+0x4c>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	3b04      	subs	r3, #4
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	0112      	lsls	r2, r2, #4
 80006c4:	b2d2      	uxtb	r2, r2
 80006c6:	440b      	add	r3, r1
 80006c8:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006ca:	e009      	b.n	80006e0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006cc:	4908      	ldr	r1, [pc, #32]	; (80006f0 <NVIC_SetPriority+0x50>)
 80006ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	b2d2      	uxtb	r2, r2
 80006d6:	0112      	lsls	r2, r2, #4
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	440b      	add	r3, r1
 80006dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000ed00 	.word	0xe000ed00
 80006f0:	e000e100 	.word	0xe000e100

080006f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b089      	sub	sp, #36	; 0x24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	69fb      	ldr	r3, [r7, #28]
 800070a:	f1c3 0307 	rsb	r3, r3, #7
 800070e:	2b04      	cmp	r3, #4
 8000710:	bf28      	it	cs
 8000712:	2304      	movcs	r3, #4
 8000714:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000716:	69fb      	ldr	r3, [r7, #28]
 8000718:	3304      	adds	r3, #4
 800071a:	2b06      	cmp	r3, #6
 800071c:	d902      	bls.n	8000724 <NVIC_EncodePriority+0x30>
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3b03      	subs	r3, #3
 8000722:	e000      	b.n	8000726 <NVIC_EncodePriority+0x32>
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000728:	2201      	movs	r2, #1
 800072a:	69bb      	ldr	r3, [r7, #24]
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	68bb      	ldr	r3, [r7, #8]
 8000734:	401a      	ands	r2, r3
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800073a:	2101      	movs	r1, #1
 800073c:	697b      	ldr	r3, [r7, #20]
 800073e:	fa01 f303 	lsl.w	r3, r1, r3
 8000742:	1e59      	subs	r1, r3, #1
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000748:	4313      	orrs	r3, r2
         );
}
 800074a:	4618      	mov	r0, r3
 800074c:	3724      	adds	r7, #36	; 0x24
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
	...

08000758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000768:	d301      	bcc.n	800076e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800076a:	2301      	movs	r3, #1
 800076c:	e00f      	b.n	800078e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800076e:	4a0a      	ldr	r2, [pc, #40]	; (8000798 <SysTick_Config+0x40>)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3b01      	subs	r3, #1
 8000774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000776:	210f      	movs	r1, #15
 8000778:	f04f 30ff 	mov.w	r0, #4294967295
 800077c:	f7ff ff90 	bl	80006a0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000780:	4b05      	ldr	r3, [pc, #20]	; (8000798 <SysTick_Config+0x40>)
 8000782:	2200      	movs	r2, #0
 8000784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000786:	4b04      	ldr	r3, [pc, #16]	; (8000798 <SysTick_Config+0x40>)
 8000788:	2207      	movs	r2, #7
 800078a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800078c:	2300      	movs	r3, #0
}
 800078e:	4618      	mov	r0, r3
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	e000e010 	.word	0xe000e010

0800079c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff ff2f 	bl	8000608 <NVIC_SetPriorityGrouping>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	4603      	mov	r3, r0
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007c0:	2300      	movs	r3, #0
 80007c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007c4:	f7ff ff44 	bl	8000650 <NVIC_GetPriorityGrouping>
 80007c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	68b9      	ldr	r1, [r7, #8]
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff90 	bl	80006f4 <NVIC_EncodePriority>
 80007d4:	4602      	mov	r2, r0
 80007d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007da:	4611      	mov	r1, r2
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ff5f 	bl	80006a0 <NVIC_SetPriority>
}
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b082      	sub	sp, #8
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ff37 	bl	800066c <NVIC_EnableIRQ>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f7ff ffa2 	bl	8000758 <SysTick_Config>
 8000814:	4603      	mov	r3, r0
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000820:	b480      	push	{r7}
 8000822:	b089      	sub	sp, #36	; 0x24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800082a:	2300      	movs	r3, #0
 800082c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
 800083e:	e175      	b.n	8000b2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000840:	2201      	movs	r2, #1
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fa02 f303 	lsl.w	r3, r2, r3
 8000848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	4013      	ands	r3, r2
 8000852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000854:	693a      	ldr	r2, [r7, #16]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	429a      	cmp	r2, r3
 800085a:	f040 8164 	bne.w	8000b26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d003      	beq.n	800086e <HAL_GPIO_Init+0x4e>
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b12      	cmp	r3, #18
 800086c:	d123      	bne.n	80008b6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	08da      	lsrs	r2, r3, #3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	3208      	adds	r2, #8
 8000876:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800087a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f003 0307 	and.w	r3, r3, #7
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	220f      	movs	r2, #15
 8000886:	fa02 f303 	lsl.w	r3, r2, r3
 800088a:	43db      	mvns	r3, r3
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	4013      	ands	r3, r2
 8000890:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	691a      	ldr	r2, [r3, #16]
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	f003 0307 	and.w	r3, r3, #7
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	4313      	orrs	r3, r2
 80008a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	69b9      	ldr	r1, [r7, #24]
 80008b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2203      	movs	r2, #3
 80008c2:	fa02 f303 	lsl.w	r3, r2, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	4013      	ands	r3, r2
 80008cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	f003 0203 	and.w	r2, r3, #3
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	69ba      	ldr	r2, [r7, #24]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b01      	cmp	r3, #1
 80008f0:	d00b      	beq.n	800090a <HAL_GPIO_Init+0xea>
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d007      	beq.n	800090a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008fe:	2b11      	cmp	r3, #17
 8000900:	d003      	beq.n	800090a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	2b12      	cmp	r3, #18
 8000908:	d130      	bne.n	800096c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	2203      	movs	r2, #3
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	43db      	mvns	r3, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4013      	ands	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68da      	ldr	r2, [r3, #12]
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4313      	orrs	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000940:	2201      	movs	r2, #1
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	091b      	lsrs	r3, r3, #4
 8000956:	f003 0201 	and.w	r2, r3, #1
 800095a:	69fb      	ldr	r3, [r7, #28]
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	69ba      	ldr	r2, [r7, #24]
 8000962:	4313      	orrs	r3, r2
 8000964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	69ba      	ldr	r2, [r7, #24]
 800096a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	005b      	lsls	r3, r3, #1
 8000976:	2203      	movs	r2, #3
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	43db      	mvns	r3, r3
 800097e:	69ba      	ldr	r2, [r7, #24]
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	69fb      	ldr	r3, [r7, #28]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4313      	orrs	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	f000 80be 	beq.w	8000b26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4a65      	ldr	r2, [pc, #404]	; (8000b40 <HAL_GPIO_Init+0x320>)
 80009ac:	4b64      	ldr	r3, [pc, #400]	; (8000b40 <HAL_GPIO_Init+0x320>)
 80009ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b4:	6453      	str	r3, [r2, #68]	; 0x44
 80009b6:	4b62      	ldr	r3, [pc, #392]	; (8000b40 <HAL_GPIO_Init+0x320>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80009c2:	4a60      	ldr	r2, [pc, #384]	; (8000b44 <HAL_GPIO_Init+0x324>)
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	089b      	lsrs	r3, r3, #2
 80009c8:	3302      	adds	r3, #2
 80009ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	f003 0303 	and.w	r3, r3, #3
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	220f      	movs	r2, #15
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	4013      	ands	r3, r2
 80009e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a57      	ldr	r2, [pc, #348]	; (8000b48 <HAL_GPIO_Init+0x328>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d037      	beq.n	8000a5e <HAL_GPIO_Init+0x23e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a56      	ldr	r2, [pc, #344]	; (8000b4c <HAL_GPIO_Init+0x32c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d031      	beq.n	8000a5a <HAL_GPIO_Init+0x23a>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a55      	ldr	r2, [pc, #340]	; (8000b50 <HAL_GPIO_Init+0x330>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d02b      	beq.n	8000a56 <HAL_GPIO_Init+0x236>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a54      	ldr	r2, [pc, #336]	; (8000b54 <HAL_GPIO_Init+0x334>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d025      	beq.n	8000a52 <HAL_GPIO_Init+0x232>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a53      	ldr	r2, [pc, #332]	; (8000b58 <HAL_GPIO_Init+0x338>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d01f      	beq.n	8000a4e <HAL_GPIO_Init+0x22e>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4a52      	ldr	r2, [pc, #328]	; (8000b5c <HAL_GPIO_Init+0x33c>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d019      	beq.n	8000a4a <HAL_GPIO_Init+0x22a>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4a51      	ldr	r2, [pc, #324]	; (8000b60 <HAL_GPIO_Init+0x340>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d013      	beq.n	8000a46 <HAL_GPIO_Init+0x226>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a50      	ldr	r2, [pc, #320]	; (8000b64 <HAL_GPIO_Init+0x344>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d00d      	beq.n	8000a42 <HAL_GPIO_Init+0x222>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a4f      	ldr	r2, [pc, #316]	; (8000b68 <HAL_GPIO_Init+0x348>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d007      	beq.n	8000a3e <HAL_GPIO_Init+0x21e>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a4e      	ldr	r2, [pc, #312]	; (8000b6c <HAL_GPIO_Init+0x34c>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d101      	bne.n	8000a3a <HAL_GPIO_Init+0x21a>
 8000a36:	2309      	movs	r3, #9
 8000a38:	e012      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	e010      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a3e:	2308      	movs	r3, #8
 8000a40:	e00e      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a42:	2307      	movs	r3, #7
 8000a44:	e00c      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a46:	2306      	movs	r3, #6
 8000a48:	e00a      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	e008      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a4e:	2304      	movs	r3, #4
 8000a50:	e006      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a52:	2303      	movs	r3, #3
 8000a54:	e004      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a56:	2302      	movs	r3, #2
 8000a58:	e002      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e000      	b.n	8000a60 <HAL_GPIO_Init+0x240>
 8000a5e:	2300      	movs	r3, #0
 8000a60:	69fa      	ldr	r2, [r7, #28]
 8000a62:	f002 0203 	and.w	r2, r2, #3
 8000a66:	0092      	lsls	r2, r2, #2
 8000a68:	4093      	lsls	r3, r2
 8000a6a:	69ba      	ldr	r2, [r7, #24]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000a70:	4934      	ldr	r1, [pc, #208]	; (8000b44 <HAL_GPIO_Init+0x324>)
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	089b      	lsrs	r3, r3, #2
 8000a76:	3302      	adds	r3, #2
 8000a78:	69ba      	ldr	r2, [r7, #24]
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a7e:	4b3c      	ldr	r3, [pc, #240]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000aa2:	4a33      	ldr	r2, [pc, #204]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000aa8:	4b31      	ldr	r3, [pc, #196]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000acc:	4a28      	ldr	r2, [pc, #160]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ad2:	4b27      	ldr	r3, [pc, #156]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000ad4:	689b      	ldr	r3, [r3, #8]
 8000ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	69ba      	ldr	r2, [r7, #24]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000af6:	4a1e      	ldr	r2, [pc, #120]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000afc:	4b1c      	ldr	r3, [pc, #112]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	69ba      	ldr	r2, [r7, #24]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d003      	beq.n	8000b20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	693b      	ldr	r3, [r7, #16]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b20:	4a13      	ldr	r2, [pc, #76]	; (8000b70 <HAL_GPIO_Init+0x350>)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	61fb      	str	r3, [r7, #28]
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	2b0f      	cmp	r3, #15
 8000b30:	f67f ae86 	bls.w	8000840 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8000b34:	bf00      	nop
 8000b36:	3724      	adds	r7, #36	; 0x24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40013800 	.word	0x40013800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	40020800 	.word	0x40020800
 8000b54:	40020c00 	.word	0x40020c00
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40021400 	.word	0x40021400
 8000b60:	40021800 	.word	0x40021800
 8000b64:	40021c00 	.word	0x40021c00
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	40022400 	.word	0x40022400
 8000b70:	40013c00 	.word	0x40013c00

08000b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b80:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000b96:	4a1e      	ldr	r2, [pc, #120]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ba0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ba2:	f7ff fd25 	bl	80005f0 <HAL_GetTick>
 8000ba6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000ba8:	e009      	b.n	8000bbe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000baa:	f7ff fd21 	bl	80005f0 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bb8:	d901      	bls.n	8000bbe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e022      	b.n	8000c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bca:	d1ee      	bne.n	8000baa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bcc:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bd8:	f7ff fd0a 	bl	80005f0 <HAL_GetTick>
 8000bdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bde:	e009      	b.n	8000bf4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000be0:	f7ff fd06 	bl	80005f0 <HAL_GetTick>
 8000be4:	4602      	mov	r2, r0
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bee:	d901      	bls.n	8000bf4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	e007      	b.n	8000c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c00:	d1ee      	bne.n	8000be0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8000c02:	2300      	movs	r3, #0
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e25e      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 8087 	beq.w	8000d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c38:	4b96      	ldr	r3, [pc, #600]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 030c 	and.w	r3, r3, #12
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d00c      	beq.n	8000c5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c44:	4b93      	ldr	r3, [pc, #588]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 030c 	and.w	r3, r3, #12
 8000c4c:	2b08      	cmp	r3, #8
 8000c4e:	d112      	bne.n	8000c76 <HAL_RCC_OscConfig+0x62>
 8000c50:	4b90      	ldr	r3, [pc, #576]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c5c:	d10b      	bne.n	8000c76 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c5e:	4b8d      	ldr	r3, [pc, #564]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d06c      	beq.n	8000d44 <HAL_RCC_OscConfig+0x130>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d168      	bne.n	8000d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e238      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c7e:	d106      	bne.n	8000c8e <HAL_RCC_OscConfig+0x7a>
 8000c80:	4a84      	ldr	r2, [pc, #528]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c82:	4b84      	ldr	r3, [pc, #528]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	e02e      	b.n	8000cec <HAL_RCC_OscConfig+0xd8>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d10c      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x9c>
 8000c96:	4a7f      	ldr	r2, [pc, #508]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c98:	4b7e      	ldr	r3, [pc, #504]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ca0:	6013      	str	r3, [r2, #0]
 8000ca2:	4a7c      	ldr	r2, [pc, #496]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000ca4:	4b7b      	ldr	r3, [pc, #492]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e01d      	b.n	8000cec <HAL_RCC_OscConfig+0xd8>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_RCC_OscConfig+0xc0>
 8000cba:	4a76      	ldr	r2, [pc, #472]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cbc:	4b75      	ldr	r3, [pc, #468]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4a73      	ldr	r2, [pc, #460]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cc8:	4b72      	ldr	r3, [pc, #456]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e00b      	b.n	8000cec <HAL_RCC_OscConfig+0xd8>
 8000cd4:	4a6f      	ldr	r2, [pc, #444]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cd6:	4b6f      	ldr	r3, [pc, #444]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4a6c      	ldr	r2, [pc, #432]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000ce2:	4b6c      	ldr	r3, [pc, #432]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d013      	beq.n	8000d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc7c 	bl	80005f0 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc78 	bl	80005f0 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1ec      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	4b61      	ldr	r3, [pc, #388]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f0      	beq.n	8000cfc <HAL_RCC_OscConfig+0xe8>
 8000d1a:	e014      	b.n	8000d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc68 	bl	80005f0 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fc64 	bl	80005f0 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e1d8      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	4b57      	ldr	r3, [pc, #348]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0x110>
 8000d42:	e000      	b.n	8000d46 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d069      	beq.n	8000e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	4b50      	ldr	r3, [pc, #320]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00b      	beq.n	8000d76 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5e:	4b4d      	ldr	r3, [pc, #308]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d11c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x190>
 8000d6a:	4b4a      	ldr	r3, [pc, #296]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d116      	bne.n	8000da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	4b47      	ldr	r3, [pc, #284]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x17a>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e1ac      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	4941      	ldr	r1, [pc, #260]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d90:	4b40      	ldr	r3, [pc, #256]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	691b      	ldr	r3, [r3, #16]
 8000d9c:	00db      	lsls	r3, r3, #3
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	e040      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d023      	beq.n	8000df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dac:	4a39      	ldr	r2, [pc, #228]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000dae:	4b39      	ldr	r3, [pc, #228]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db8:	f7ff fc1a 	bl	80005f0 <HAL_GetTick>
 8000dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dbe:	e008      	b.n	8000dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc0:	f7ff fc16 	bl	80005f0 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d901      	bls.n	8000dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	e18a      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f0      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dde:	492d      	ldr	r1, [pc, #180]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	00db      	lsls	r3, r3, #3
 8000dee:	4313      	orrs	r3, r2
 8000df0:	600b      	str	r3, [r1, #0]
 8000df2:	e018      	b.n	8000e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000df4:	4a27      	ldr	r2, [pc, #156]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000df6:	4b27      	ldr	r3, [pc, #156]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f023 0301 	bic.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e00:	f7ff fbf6 	bl	80005f0 <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e08:	f7ff fbf2 	bl	80005f0 <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e166      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d038      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d019      	beq.n	8000e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3a:	4a16      	ldr	r2, [pc, #88]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e3c:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e46:	f7ff fbd3 	bl	80005f0 <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4c:	e008      	b.n	8000e60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fbcf 	bl	80005f0 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d901      	bls.n	8000e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e143      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e64:	f003 0302 	and.w	r3, r3, #2
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d0f0      	beq.n	8000e4e <HAL_RCC_OscConfig+0x23a>
 8000e6c:	e01a      	b.n	8000ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e6e:	4a09      	ldr	r2, [pc, #36]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_RCC_OscConfig+0x280>)
 8000e72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e74:	f023 0301 	bic.w	r3, r3, #1
 8000e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fbb9 	bl	80005f0 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e80:	e00a      	b.n	8000e98 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e82:	f7ff fbb5 	bl	80005f0 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d903      	bls.n	8000e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e129      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
 8000e94:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e98:	4b95      	ldr	r3, [pc, #596]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d1ee      	bne.n	8000e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0304 	and.w	r3, r3, #4
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f000 80a4 	beq.w	8000ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb2:	4b8f      	ldr	r3, [pc, #572]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10d      	bne.n	8000eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4a8c      	ldr	r2, [pc, #560]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000ec0:	4b8b      	ldr	r3, [pc, #556]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eca:	4b89      	ldr	r3, [pc, #548]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eda:	4b86      	ldr	r3, [pc, #536]	; (80010f4 <HAL_RCC_OscConfig+0x4e0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d118      	bne.n	8000f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8000ee6:	4a83      	ldr	r2, [pc, #524]	; (80010f4 <HAL_RCC_OscConfig+0x4e0>)
 8000ee8:	4b82      	ldr	r3, [pc, #520]	; (80010f4 <HAL_RCC_OscConfig+0x4e0>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef2:	f7ff fb7d 	bl	80005f0 <HAL_GetTick>
 8000ef6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ef8:	e008      	b.n	8000f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8000efa:	f7ff fb79 	bl	80005f0 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	2b64      	cmp	r3, #100	; 0x64
 8000f06:	d901      	bls.n	8000f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	e0ed      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000f0c:	4b79      	ldr	r3, [pc, #484]	; (80010f4 <HAL_RCC_OscConfig+0x4e0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d0f0      	beq.n	8000efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d106      	bne.n	8000f2e <HAL_RCC_OscConfig+0x31a>
 8000f20:	4a73      	ldr	r2, [pc, #460]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f22:	4b73      	ldr	r3, [pc, #460]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f26:	f043 0301 	orr.w	r3, r3, #1
 8000f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2c:	e02d      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d10c      	bne.n	8000f50 <HAL_RCC_OscConfig+0x33c>
 8000f36:	4a6e      	ldr	r2, [pc, #440]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f38:	4b6d      	ldr	r3, [pc, #436]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3c:	f023 0301 	bic.w	r3, r3, #1
 8000f40:	6713      	str	r3, [r2, #112]	; 0x70
 8000f42:	4a6b      	ldr	r2, [pc, #428]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f44:	4b6a      	ldr	r3, [pc, #424]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f48:	f023 0304 	bic.w	r3, r3, #4
 8000f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f4e:	e01c      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	d10c      	bne.n	8000f72 <HAL_RCC_OscConfig+0x35e>
 8000f58:	4a65      	ldr	r2, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f5a:	4b65      	ldr	r3, [pc, #404]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5e:	f043 0304 	orr.w	r3, r3, #4
 8000f62:	6713      	str	r3, [r2, #112]	; 0x70
 8000f64:	4a62      	ldr	r2, [pc, #392]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f70:	e00b      	b.n	8000f8a <HAL_RCC_OscConfig+0x376>
 8000f72:	4a5f      	ldr	r2, [pc, #380]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f74:	4b5e      	ldr	r3, [pc, #376]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f78:	f023 0301 	bic.w	r3, r3, #1
 8000f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f7e:	4a5c      	ldr	r2, [pc, #368]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f80:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f84:	f023 0304 	bic.w	r3, r3, #4
 8000f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d015      	beq.n	8000fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f92:	f7ff fb2d 	bl	80005f0 <HAL_GetTick>
 8000f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f98:	e00a      	b.n	8000fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f9a:	f7ff fb29 	bl	80005f0 <HAL_GetTick>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	1ad3      	subs	r3, r2, r3
 8000fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d901      	bls.n	8000fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	e09b      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fb0:	4b4f      	ldr	r3, [pc, #316]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fb4:	f003 0302 	and.w	r3, r3, #2
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d0ee      	beq.n	8000f9a <HAL_RCC_OscConfig+0x386>
 8000fbc:	e014      	b.n	8000fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb17 	bl	80005f0 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fc4:	e00a      	b.n	8000fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fc6:	f7ff fb13 	bl	80005f0 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e085      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fdc:	4b44      	ldr	r3, [pc, #272]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1ee      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fe8:	7dfb      	ldrb	r3, [r7, #23]
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d105      	bne.n	8000ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fee:	4a40      	ldr	r2, [pc, #256]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000ff0:	4b3f      	ldr	r3, [pc, #252]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d071      	beq.n	80010e6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001002:	4b3b      	ldr	r3, [pc, #236]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f003 030c 	and.w	r3, r3, #12
 800100a:	2b08      	cmp	r3, #8
 800100c:	d069      	beq.n	80010e2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	699b      	ldr	r3, [r3, #24]
 8001012:	2b02      	cmp	r3, #2
 8001014:	d14b      	bne.n	80010ae <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001016:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 8001018:	4b35      	ldr	r3, [pc, #212]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001022:	f7ff fae5 	bl	80005f0 <HAL_GetTick>
 8001026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001028:	e008      	b.n	800103c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800102a:	f7ff fae1 	bl	80005f0 <HAL_GetTick>
 800102e:	4602      	mov	r2, r0
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d901      	bls.n	800103c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001038:	2303      	movs	r3, #3
 800103a:	e055      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1f0      	bne.n	800102a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001048:	4929      	ldr	r1, [pc, #164]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69da      	ldr	r2, [r3, #28]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001058:	019b      	lsls	r3, r3, #6
 800105a:	431a      	orrs	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001060:	085b      	lsrs	r3, r3, #1
 8001062:	3b01      	subs	r3, #1
 8001064:	041b      	lsls	r3, r3, #16
 8001066:	431a      	orrs	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	061b      	lsls	r3, r3, #24
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001074:	071b      	lsls	r3, r3, #28
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800107a:	4a1d      	ldr	r2, [pc, #116]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001086:	f7ff fab3 	bl	80005f0 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108e:	f7ff faaf 	bl	80005f0 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e023      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f0      	beq.n	800108e <HAL_RCC_OscConfig+0x47a>
 80010ac:	e01b      	b.n	80010e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ae:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 80010b0:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ba:	f7ff fa99 	bl	80005f0 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010c0:	e008      	b.n	80010d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010c2:	f7ff fa95 	bl	80005f0 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80010d0:	2303      	movs	r3, #3
 80010d2:	e009      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <HAL_RCC_OscConfig+0x4dc>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d1f0      	bne.n	80010c2 <HAL_RCC_OscConfig+0x4ae>
 80010e0:	e001      	b.n	80010e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80010e6:	2300      	movs	r3, #0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40007000 	.word	0x40007000

080010f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e0ce      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001110:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 020f 	and.w	r2, r3, #15
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	429a      	cmp	r2, r3
 800111c:	d210      	bcs.n	8001140 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111e:	4966      	ldr	r1, [pc, #408]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001120:	4b65      	ldr	r3, [pc, #404]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 020f 	bic.w	r2, r3, #15
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	4313      	orrs	r3, r2
 800112c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800112e:	4b62      	ldr	r3, [pc, #392]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f003 020f 	and.w	r2, r3, #15
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d001      	beq.n	8001140 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e0b6      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d020      	beq.n	800118e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d005      	beq.n	8001164 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001158:	4a58      	ldr	r2, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800115a:	4b58      	ldr	r3, [pc, #352]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001162:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0308 	and.w	r3, r3, #8
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001170:	4a52      	ldr	r2, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001172:	4b52      	ldr	r3, [pc, #328]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800117a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	494f      	ldr	r1, [pc, #316]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800117e:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d040      	beq.n	800121c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d115      	bne.n	80011da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e07d      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d109      	bne.n	80011da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e071      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ca:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e069      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011da:	4938      	ldr	r1, [pc, #224]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011dc:	4b37      	ldr	r3, [pc, #220]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f023 0203 	bic.w	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80011ec:	f7ff fa00 	bl	80005f0 <HAL_GetTick>
 80011f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011f2:	e00a      	b.n	800120a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011f4:	f7ff f9fc 	bl	80005f0 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001202:	4293      	cmp	r3, r2
 8001204:	d901      	bls.n	800120a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e051      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	4b2c      	ldr	r3, [pc, #176]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 020c 	and.w	r2, r3, #12
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	429a      	cmp	r2, r3
 800121a:	d1eb      	bne.n	80011f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800121c:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 020f 	and.w	r2, r3, #15
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	429a      	cmp	r2, r3
 8001228:	d910      	bls.n	800124c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800122a:	4923      	ldr	r1, [pc, #140]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f023 020f 	bic.w	r2, r3, #15
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	4313      	orrs	r3, r2
 8001238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_RCC_ClockConfig+0x1c0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 020f 	and.w	r2, r3, #15
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	429a      	cmp	r2, r3
 8001246:	d001      	beq.n	800124c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001248:	2301      	movs	r3, #1
 800124a:	e030      	b.n	80012ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001258:	4918      	ldr	r1, [pc, #96]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	2b00      	cmp	r3, #0
 8001274:	d009      	beq.n	800128a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001276:	4911      	ldr	r1, [pc, #68]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	4b10      	ldr	r3, [pc, #64]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4313      	orrs	r3, r2
 8001288:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800128a:	f000 f81d 	bl	80012c8 <HAL_RCC_GetSysClockFreq>
 800128e:	4601      	mov	r1, r0
 8001290:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_RCC_ClockConfig+0x1c4>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	091b      	lsrs	r3, r3, #4
 8001296:	f003 030f 	and.w	r3, r3, #15
 800129a:	4a09      	ldr	r2, [pc, #36]	; (80012c0 <HAL_RCC_ClockConfig+0x1c8>)
 800129c:	5cd3      	ldrb	r3, [r2, r3]
 800129e:	fa21 f303 	lsr.w	r3, r1, r3
 80012a2:	4a08      	ldr	r2, [pc, #32]	; (80012c4 <HAL_RCC_ClockConfig+0x1cc>)
 80012a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80012a6:	200f      	movs	r0, #15
 80012a8:	f7ff f972 	bl	8000590 <HAL_InitTick>

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023c00 	.word	0x40023c00
 80012bc:	40023800 	.word	0x40023800
 80012c0:	08002990 	.word	0x08002990
 80012c4:	2002003c 	.word	0x2002003c

080012c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012cc:	b08f      	sub	sp, #60	; 0x3c
 80012ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f003 030c 	and.w	r3, r3, #12
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_GetSysClockFreq+0x34>
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d008      	beq.n	8001302 <HAL_RCC_GetSysClockFreq+0x3a>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f040 80b2 	bne.w	800145a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012f6:	4b5e      	ldr	r3, [pc, #376]	; (8001470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80012fa:	e0b1      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012fc:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80012fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001300:	e0ae      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001302:	4b5a      	ldr	r3, [pc, #360]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800130c:	4b57      	ldr	r3, [pc, #348]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d04e      	beq.n	80013b6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001318:	4b54      	ldr	r3, [pc, #336]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	099b      	lsrs	r3, r3, #6
 800131e:	f04f 0400 	mov.w	r4, #0
 8001322:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	ea01 0103 	and.w	r1, r1, r3
 800132e:	ea02 0204 	and.w	r2, r2, r4
 8001332:	460b      	mov	r3, r1
 8001334:	4614      	mov	r4, r2
 8001336:	0160      	lsls	r0, r4, #5
 8001338:	6278      	str	r0, [r7, #36]	; 0x24
 800133a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800133c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8001340:	6278      	str	r0, [r7, #36]	; 0x24
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	623b      	str	r3, [r7, #32]
 8001346:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800134a:	1a5b      	subs	r3, r3, r1
 800134c:	eb64 0402 	sbc.w	r4, r4, r2
 8001350:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8001354:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8001358:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800135c:	ebb8 0803 	subs.w	r8, r8, r3
 8001360:	eb69 0904 	sbc.w	r9, r9, r4
 8001364:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800137c:	eb18 0801 	adds.w	r8, r8, r1
 8001380:	eb49 0902 	adc.w	r9, r9, r2
 8001384:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8001396:	613b      	str	r3, [r7, #16]
 8001398:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800139c:	4640      	mov	r0, r8
 800139e:	4649      	mov	r1, r9
 80013a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013a2:	f04f 0400 	mov.w	r4, #0
 80013a6:	461a      	mov	r2, r3
 80013a8:	4623      	mov	r3, r4
 80013aa:	f7fe ff45 	bl	8000238 <__aeabi_uldivmod>
 80013ae:	4603      	mov	r3, r0
 80013b0:	460c      	mov	r4, r1
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
 80013b4:	e043      	b.n	800143e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	099b      	lsrs	r3, r3, #6
 80013bc:	f04f 0400 	mov.w	r4, #0
 80013c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	ea01 0103 	and.w	r1, r1, r3
 80013cc:	ea02 0204 	and.w	r2, r2, r4
 80013d0:	460b      	mov	r3, r1
 80013d2:	4614      	mov	r4, r2
 80013d4:	0160      	lsls	r0, r4, #5
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	015b      	lsls	r3, r3, #5
 80013e2:	60bb      	str	r3, [r7, #8]
 80013e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80013e8:	1a5b      	subs	r3, r3, r1
 80013ea:	eb64 0402 	sbc.w	r4, r4, r2
 80013ee:	01a6      	lsls	r6, r4, #6
 80013f0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80013f4:	019d      	lsls	r5, r3, #6
 80013f6:	1aed      	subs	r5, r5, r3
 80013f8:	eb66 0604 	sbc.w	r6, r6, r4
 80013fc:	00f3      	lsls	r3, r6, #3
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	00eb      	lsls	r3, r5, #3
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8001410:	186d      	adds	r5, r5, r1
 8001412:	eb46 0602 	adc.w	r6, r6, r2
 8001416:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800141a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800141e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8001422:	4655      	mov	r5, sl
 8001424:	465e      	mov	r6, fp
 8001426:	4628      	mov	r0, r5
 8001428:	4631      	mov	r1, r6
 800142a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142c:	f04f 0400 	mov.w	r4, #0
 8001430:	461a      	mov	r2, r3
 8001432:	4623      	mov	r3, r4
 8001434:	f7fe ff00 	bl	8000238 <__aeabi_uldivmod>
 8001438:	4603      	mov	r3, r0
 800143a:	460c      	mov	r4, r1
 800143c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	0c1b      	lsrs	r3, r3, #16
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	3301      	adds	r3, #1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800144e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001458:	e002      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800145a:	4b05      	ldr	r3, [pc, #20]	; (8001470 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800145e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001462:	4618      	mov	r0, r3
 8001464:	373c      	adds	r7, #60	; 0x3c
 8001466:	46bd      	mov	sp, r7
 8001468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	00f42400 	.word	0x00f42400
 8001474:	007a1200 	.word	0x007a1200

08001478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e01d      	b.n	80014c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 f815 	bl	80014ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2202      	movs	r2, #2
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3304      	adds	r3, #4
 80014b4:	4619      	mov	r1, r3
 80014b6:	4610      	mov	r0, r2
 80014b8:	f000 fa6e 	bl	8001998 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
	...

080014e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	687a      	ldr	r2, [r7, #4]
 80014f2:	6812      	ldr	r2, [r2, #0]
 80014f4:	68d2      	ldr	r2, [r2, #12]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <HAL_TIM_Base_Start_IT+0x50>)
 8001504:	4013      	ands	r3, r2
 8001506:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2b06      	cmp	r3, #6
 800150c:	d00b      	beq.n	8001526 <HAL_TIM_Base_Start_IT+0x42>
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001514:	d007      	beq.n	8001526 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6812      	ldr	r2, [r2, #0]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	00010007 	.word	0x00010007

08001538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 fd22 	bl	8001f94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a17      	ldr	r2, [pc, #92]	; (80015b4 <HAL_TIM_PWM_Start+0x7c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d004      	beq.n	8001564 <HAL_TIM_PWM_Start+0x2c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <HAL_TIM_PWM_Start+0x80>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_TIM_PWM_Start+0x30>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_TIM_PWM_Start+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001578:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_TIM_PWM_Start+0x84>)
 8001586:	4013      	ands	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	2b06      	cmp	r3, #6
 800158e:	d00b      	beq.n	80015a8 <HAL_TIM_PWM_Start+0x70>
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d007      	beq.n	80015a8 <HAL_TIM_PWM_Start+0x70>
  {
    __HAL_TIM_ENABLE(htim);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40010000 	.word	0x40010000
 80015b8:	40010400 	.word	0x40010400
 80015bc:	00010007 	.word	0x00010007

080015c0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d101      	bne.n	80015d4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e07b      	b.n	80016cc <HAL_TIM_Encoder_Init+0x10c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d106      	bne.n	80015ee <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f87b 	bl	80016e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2202      	movs	r2, #2
 80015f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_TIM_Encoder_Init+0x114>)
 8001602:	400b      	ands	r3, r1
 8001604:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	4619      	mov	r1, r3
 8001610:	4610      	mov	r0, r2
 8001612:	f000 f9c1 	bl	8001998 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_TIM_Encoder_Init+0x118>)
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	4313      	orrs	r3, r2
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	4313      	orrs	r3, r2
 8001650:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_TIM_Encoder_Init+0x11c>)
 8001656:	4013      	ands	r3, r2
 8001658:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_TIM_Encoder_Init+0x120>)
 800165e:	4013      	ands	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	4313      	orrs	r3, r2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	4313      	orrs	r3, r2
 8001672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	011a      	lsls	r2, r3, #4
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	031b      	lsls	r3, r3, #12
 8001680:	4313      	orrs	r3, r2
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	4313      	orrs	r3, r2
 8001686:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800168e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8001696:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4313      	orrs	r3, r2
 80016a4:	68fa      	ldr	r2, [r7, #12]
 80016a6:	4313      	orrs	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2201      	movs	r2, #1
 80016c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3718      	adds	r7, #24
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	fffebff8 	.word	0xfffebff8
 80016d8:	fffffcfc 	.word	0xfffffcfc
 80016dc:	fffff3f3 	.word	0xfffff3f3
 80016e0:	ffff0f0f 	.word	0xffff0f0f

080016e4 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d002      	beq.n	800170e <HAL_TIM_Encoder_Start+0x16>
 8001708:	2b04      	cmp	r3, #4
 800170a:	d008      	beq.n	800171e <HAL_TIM_Encoder_Start+0x26>
 800170c:	e00f      	b.n	800172e <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f000 fc3c 	bl	8001f94 <TIM_CCxChannelCmd>
      break;
 800171c:	e016      	b.n	800174c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2201      	movs	r2, #1
 8001724:	2104      	movs	r1, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fc34 	bl	8001f94 <TIM_CCxChannelCmd>
      break;
 800172c:	e00e      	b.n	800174c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2201      	movs	r2, #1
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fc2c 	bl	8001f94 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	2104      	movs	r1, #4
 8001744:	4618      	mov	r0, r3
 8001746:	f000 fc25 	bl	8001f94 <TIM_CCxChannelCmd>
      break;
 800174a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
	...

08001768 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	60f8      	str	r0, [r7, #12]
 8001770:	60b9      	str	r1, [r7, #8]
 8001772:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800177a:	2b01      	cmp	r3, #1
 800177c:	d101      	bne.n	8001782 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800177e:	2302      	movs	r3, #2
 8001780:	e105      	b.n	800198e <HAL_TIM_PWM_ConfigChannel+0x226>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2201      	movs	r2, #1
 8001786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2202      	movs	r2, #2
 800178e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b14      	cmp	r3, #20
 8001796:	f200 80f0 	bhi.w	800197a <HAL_TIM_PWM_ConfigChannel+0x212>
 800179a:	a201      	add	r2, pc, #4	; (adr r2, 80017a0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017f5 	.word	0x080017f5
 80017a4:	0800197b 	.word	0x0800197b
 80017a8:	0800197b 	.word	0x0800197b
 80017ac:	0800197b 	.word	0x0800197b
 80017b0:	08001835 	.word	0x08001835
 80017b4:	0800197b 	.word	0x0800197b
 80017b8:	0800197b 	.word	0x0800197b
 80017bc:	0800197b 	.word	0x0800197b
 80017c0:	08001877 	.word	0x08001877
 80017c4:	0800197b 	.word	0x0800197b
 80017c8:	0800197b 	.word	0x0800197b
 80017cc:	0800197b 	.word	0x0800197b
 80017d0:	080018b7 	.word	0x080018b7
 80017d4:	0800197b 	.word	0x0800197b
 80017d8:	0800197b 	.word	0x0800197b
 80017dc:	0800197b 	.word	0x0800197b
 80017e0:	080018f9 	.word	0x080018f9
 80017e4:	0800197b 	.word	0x0800197b
 80017e8:	0800197b 	.word	0x0800197b
 80017ec:	0800197b 	.word	0x0800197b
 80017f0:	08001939 	.word	0x08001939
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68b9      	ldr	r1, [r7, #8]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f96c 	bl	8001ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	6992      	ldr	r2, [r2, #24]
 800180a:	f042 0208 	orr.w	r2, r2, #8
 800180e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	6992      	ldr	r2, [r2, #24]
 800181a:	f022 0204 	bic.w	r2, r2, #4
 800181e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6812      	ldr	r2, [r2, #0]
 8001828:	6991      	ldr	r1, [r2, #24]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	6912      	ldr	r2, [r2, #16]
 800182e:	430a      	orrs	r2, r1
 8001830:	619a      	str	r2, [r3, #24]
      break;
 8001832:	e0a3      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f9be 	bl	8001bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68fa      	ldr	r2, [r7, #12]
 8001846:	6812      	ldr	r2, [r2, #0]
 8001848:	6992      	ldr	r2, [r2, #24]
 800184a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800184e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	6992      	ldr	r2, [r2, #24]
 800185a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6991      	ldr	r1, [r2, #24]
 800186a:	68ba      	ldr	r2, [r7, #8]
 800186c:	6912      	ldr	r2, [r2, #16]
 800186e:	0212      	lsls	r2, r2, #8
 8001870:	430a      	orrs	r2, r1
 8001872:	619a      	str	r2, [r3, #24]
      break;
 8001874:	e082      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68b9      	ldr	r1, [r7, #8]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa15 	bl	8001cac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	69d2      	ldr	r2, [r2, #28]
 800188c:	f042 0208 	orr.w	r2, r2, #8
 8001890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	69d2      	ldr	r2, [r2, #28]
 800189c:	f022 0204 	bic.w	r2, r2, #4
 80018a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6812      	ldr	r2, [r2, #0]
 80018aa:	69d1      	ldr	r1, [r2, #28]
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	6912      	ldr	r2, [r2, #16]
 80018b0:	430a      	orrs	r2, r1
 80018b2:	61da      	str	r2, [r3, #28]
      break;
 80018b4:	e062      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	4618      	mov	r0, r3
 80018be:	f000 fa6b 	bl	8001d98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	69d2      	ldr	r2, [r2, #28]
 80018cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	69d2      	ldr	r2, [r2, #28]
 80018dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	69d1      	ldr	r1, [r2, #28]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	6912      	ldr	r2, [r2, #16]
 80018f0:	0212      	lsls	r2, r2, #8
 80018f2:	430a      	orrs	r2, r1
 80018f4:	61da      	str	r2, [r3, #28]
      break;
 80018f6:	e041      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68b9      	ldr	r1, [r7, #8]
 80018fe:	4618      	mov	r0, r3
 8001900:	f000 faa2 	bl	8001e48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800190e:	f042 0208 	orr.w	r2, r2, #8
 8001912:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800191e:	f022 0204 	bic.w	r2, r2, #4
 8001922:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800192e:	68ba      	ldr	r2, [r7, #8]
 8001930:	6912      	ldr	r2, [r2, #16]
 8001932:	430a      	orrs	r2, r1
 8001934:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001936:	e021      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68b9      	ldr	r1, [r7, #8]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fad4 	bl	8001eec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	6812      	ldr	r2, [r2, #0]
 800194c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800194e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001952:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800195e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001962:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	6812      	ldr	r2, [r2, #0]
 800196c:	6d51      	ldr	r1, [r2, #84]	; 0x54
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	6912      	ldr	r2, [r2, #16]
 8001972:	0212      	lsls	r2, r2, #8
 8001974:	430a      	orrs	r2, r1
 8001976:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8001978:	e000      	b.n	800197c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800197a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2201      	movs	r2, #1
 8001980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop

08001998 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <TIM_Base_SetConfig+0x114>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d013      	beq.n	80019d8 <TIM_Base_SetConfig+0x40>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b6:	d00f      	beq.n	80019d8 <TIM_Base_SetConfig+0x40>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3d      	ldr	r2, [pc, #244]	; (8001ab0 <TIM_Base_SetConfig+0x118>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d00b      	beq.n	80019d8 <TIM_Base_SetConfig+0x40>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a3c      	ldr	r2, [pc, #240]	; (8001ab4 <TIM_Base_SetConfig+0x11c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d007      	beq.n	80019d8 <TIM_Base_SetConfig+0x40>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a3b      	ldr	r2, [pc, #236]	; (8001ab8 <TIM_Base_SetConfig+0x120>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d003      	beq.n	80019d8 <TIM_Base_SetConfig+0x40>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a3a      	ldr	r2, [pc, #232]	; (8001abc <TIM_Base_SetConfig+0x124>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d108      	bne.n	80019ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a2f      	ldr	r2, [pc, #188]	; (8001aac <TIM_Base_SetConfig+0x114>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02b      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f8:	d027      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a2c      	ldr	r2, [pc, #176]	; (8001ab0 <TIM_Base_SetConfig+0x118>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d023      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <TIM_Base_SetConfig+0x11c>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d01f      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <TIM_Base_SetConfig+0x120>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01b      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a29      	ldr	r2, [pc, #164]	; (8001abc <TIM_Base_SetConfig+0x124>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d017      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a28      	ldr	r2, [pc, #160]	; (8001ac0 <TIM_Base_SetConfig+0x128>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d013      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a27      	ldr	r2, [pc, #156]	; (8001ac4 <TIM_Base_SetConfig+0x12c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d00f      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <TIM_Base_SetConfig+0x130>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d00b      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <TIM_Base_SetConfig+0x134>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d007      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a24      	ldr	r2, [pc, #144]	; (8001ad0 <TIM_Base_SetConfig+0x138>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d003      	beq.n	8001a4a <TIM_Base_SetConfig+0xb2>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <TIM_Base_SetConfig+0x13c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d108      	bne.n	8001a5c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	68db      	ldr	r3, [r3, #12]
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a0a      	ldr	r2, [pc, #40]	; (8001aac <TIM_Base_SetConfig+0x114>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d003      	beq.n	8001a90 <TIM_Base_SetConfig+0xf8>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	4a0c      	ldr	r2, [pc, #48]	; (8001abc <TIM_Base_SetConfig+0x124>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d103      	bne.n	8001a98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	691a      	ldr	r2, [r3, #16]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	615a      	str	r2, [r3, #20]
}
 8001a9e:	bf00      	nop
 8001aa0:	3714      	adds	r7, #20
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40010000 	.word	0x40010000
 8001ab0:	40000400 	.word	0x40000400
 8001ab4:	40000800 	.word	0x40000800
 8001ab8:	40000c00 	.word	0x40000c00
 8001abc:	40010400 	.word	0x40010400
 8001ac0:	40014000 	.word	0x40014000
 8001ac4:	40014400 	.word	0x40014400
 8001ac8:	40014800 	.word	0x40014800
 8001acc:	40001800 	.word	0x40001800
 8001ad0:	40001c00 	.word	0x40001c00
 8001ad4:	40002000 	.word	0x40002000

08001ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b087      	sub	sp, #28
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a1b      	ldr	r3, [r3, #32]
 8001ae6:	f023 0201 	bic.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <TIM_OC1_SetConfig+0xd8>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0303 	bic.w	r3, r3, #3
 8001b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a21      	ldr	r2, [pc, #132]	; (8001bb4 <TIM_OC1_SetConfig+0xdc>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d003      	beq.n	8001b3c <TIM_OC1_SetConfig+0x64>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	4a20      	ldr	r2, [pc, #128]	; (8001bb8 <TIM_OC1_SetConfig+0xe0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d10c      	bne.n	8001b56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f023 0308 	bic.w	r3, r3, #8
 8001b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	697a      	ldr	r2, [r7, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	f023 0304 	bic.w	r3, r3, #4
 8001b54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a16      	ldr	r2, [pc, #88]	; (8001bb4 <TIM_OC1_SetConfig+0xdc>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d003      	beq.n	8001b66 <TIM_OC1_SetConfig+0x8e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <TIM_OC1_SetConfig+0xe0>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d111      	bne.n	8001b8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001b74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	621a      	str	r2, [r3, #32]
}
 8001ba4:	bf00      	nop
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	fffeff8f 	.word	0xfffeff8f
 8001bb4:	40010000 	.word	0x40010000
 8001bb8:	40010400 	.word	0x40010400

08001bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b087      	sub	sp, #28
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f023 0210 	bic.w	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001be4:	68fa      	ldr	r2, [r7, #12]
 8001be6:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <TIM_OC2_SetConfig+0xe4>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f023 0320 	bic.w	r3, r3, #32
 8001c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <TIM_OC2_SetConfig+0xe8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <TIM_OC2_SetConfig+0x68>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a22      	ldr	r2, [pc, #136]	; (8001ca8 <TIM_OC2_SetConfig+0xec>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d10d      	bne.n	8001c40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	697a      	ldr	r2, [r7, #20]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	4a18      	ldr	r2, [pc, #96]	; (8001ca4 <TIM_OC2_SetConfig+0xe8>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d003      	beq.n	8001c50 <TIM_OC2_SetConfig+0x94>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <TIM_OC2_SetConfig+0xec>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d113      	bne.n	8001c78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	695b      	ldr	r3, [r3, #20]
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68fa      	ldr	r2, [r7, #12]
 8001c82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	621a      	str	r2, [r3, #32]
}
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	feff8fff 	.word	0xfeff8fff
 8001ca4:	40010000 	.word	0x40010000
 8001ca8:	40010400 	.word	0x40010400

08001cac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a1b      	ldr	r3, [r3, #32]
 8001cc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <TIM_OC3_SetConfig+0xe0>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f023 0303 	bic.w	r3, r3, #3
 8001ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a22      	ldr	r2, [pc, #136]	; (8001d90 <TIM_OC3_SetConfig+0xe4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d003      	beq.n	8001d12 <TIM_OC3_SetConfig+0x66>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a21      	ldr	r2, [pc, #132]	; (8001d94 <TIM_OC3_SetConfig+0xe8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d10d      	bne.n	8001d2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <TIM_OC3_SetConfig+0xe4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d003      	beq.n	8001d3e <TIM_OC3_SetConfig+0x92>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a16      	ldr	r2, [pc, #88]	; (8001d94 <TIM_OC3_SetConfig+0xe8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d113      	bne.n	8001d66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	695b      	ldr	r3, [r3, #20]
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	693a      	ldr	r2, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	621a      	str	r2, [r3, #32]
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	fffeff8f 	.word	0xfffeff8f
 8001d90:	40010000 	.word	0x40010000
 8001d94:	40010400 	.word	0x40010400

08001d98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b087      	sub	sp, #28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <TIM_OC4_SetConfig+0xa4>)
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	021b      	lsls	r3, r3, #8
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001de2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	031b      	lsls	r3, r3, #12
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a13      	ldr	r2, [pc, #76]	; (8001e40 <TIM_OC4_SetConfig+0xa8>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d003      	beq.n	8001e00 <TIM_OC4_SetConfig+0x68>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <TIM_OC4_SetConfig+0xac>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d109      	bne.n	8001e14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	621a      	str	r2, [r3, #32]
}
 8001e2e:	bf00      	nop
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	feff8fff 	.word	0xfeff8fff
 8001e40:	40010000 	.word	0x40010000
 8001e44:	40010400 	.word	0x40010400

08001e48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b087      	sub	sp, #28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4b1b      	ldr	r3, [pc, #108]	; (8001ee0 <TIM_OC5_SetConfig+0x98>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68fa      	ldr	r2, [r7, #12]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	041b      	lsls	r3, r3, #16
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a12      	ldr	r2, [pc, #72]	; (8001ee4 <TIM_OC5_SetConfig+0x9c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d003      	beq.n	8001ea6 <TIM_OC5_SetConfig+0x5e>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a11      	ldr	r2, [pc, #68]	; (8001ee8 <TIM_OC5_SetConfig+0xa0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d109      	bne.n	8001eba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	021b      	lsls	r3, r3, #8
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	621a      	str	r2, [r3, #32]
}
 8001ed4:	bf00      	nop
 8001ed6:	371c      	adds	r7, #28
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	fffeff8f 	.word	0xfffeff8f
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40010400 	.word	0x40010400

08001eec <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a1b      	ldr	r3, [r3, #32]
 8001efa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a1b      	ldr	r3, [r3, #32]
 8001f06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <TIM_OC6_SetConfig+0x9c>)
 8001f18:	4013      	ands	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	021b      	lsls	r3, r3, #8
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001f2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	051b      	lsls	r3, r3, #20
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a13      	ldr	r2, [pc, #76]	; (8001f8c <TIM_OC6_SetConfig+0xa0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d003      	beq.n	8001f4c <TIM_OC6_SetConfig+0x60>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <TIM_OC6_SetConfig+0xa4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d109      	bne.n	8001f60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	695b      	ldr	r3, [r3, #20]
 8001f58:	029b      	lsls	r3, r3, #10
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685a      	ldr	r2, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	621a      	str	r2, [r3, #32]
}
 8001f7a:	bf00      	nop
 8001f7c:	371c      	adds	r7, #28
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	feff8fff 	.word	0xfeff8fff
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40010400 	.word	0x40010400

08001f94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b087      	sub	sp, #28
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6a1a      	ldr	r2, [r3, #32]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a1a      	ldr	r2, [r3, #32]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 031f 	and.w	r3, r3, #31
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	621a      	str	r2, [r3, #32]
}
 8001fd2:	bf00      	nop
 8001fd4:	371c      	adds	r7, #28
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <ENCODER2_Init>:
 *      Author: RICHARD
 */
#include "encoder.h"

void ENCODER2_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b092      	sub	sp, #72	; 0x48
 8001fe4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_Encoder_InitTypeDef ENCODER_InitStructure;

	__HAL_RCC_TIM2_CLK_ENABLE();
 8001fe6:	4a43      	ldr	r2, [pc, #268]	; (80020f4 <ENCODER2_Init+0x114>)
 8001fe8:	4b42      	ldr	r3, [pc, #264]	; (80020f4 <ENCODER2_Init+0x114>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b40      	ldr	r3, [pc, #256]	; (80020f4 <ENCODER2_Init+0x114>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ffe:	4a3d      	ldr	r2, [pc, #244]	; (80020f4 <ENCODER2_Init+0x114>)
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <ENCODER2_Init+0x114>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b3a      	ldr	r3, [pc, #232]	; (80020f4 <ENCODER2_Init+0x114>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002016:	4a37      	ldr	r2, [pc, #220]	; (80020f4 <ENCODER2_Init+0x114>)
 8002018:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <ENCODER2_Init+0x114>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <ENCODER2_Init+0x114>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStructure.Pin = GPIO_PIN_3;
 800202e:	2308      	movs	r3, #8
 8002030:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002032:	2302      	movs	r3, #2
 8002034:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStructure.Alternate = GPIO_AF1_TIM2;
 8002036:	2301      	movs	r3, #1
 8002038:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800203a:	2301      	movs	r3, #1
 800203c:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203e:	2303      	movs	r3, #3
 8002040:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOB,&GPIO_InitStructure);
 8002042:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002046:	4619      	mov	r1, r3
 8002048:	482b      	ldr	r0, [pc, #172]	; (80020f8 <ENCODER2_Init+0x118>)
 800204a:	f7fe fbe9 	bl	8000820 <HAL_GPIO_Init>

	GPIO_InitStructure.Pin = GPIO_PIN_5;
 800204e:	2320      	movs	r3, #32
 8002050:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStructure.Alternate = GPIO_AF1_TIM2;
 8002056:	2301      	movs	r3, #1
 8002058:	647b      	str	r3, [r7, #68]	; 0x44
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 800205a:	2301      	movs	r3, #1
 800205c:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205e:	2303      	movs	r3, #3
 8002060:	643b      	str	r3, [r7, #64]	; 0x40
	HAL_GPIO_Init(GPIOA,&GPIO_InitStructure);
 8002062:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002066:	4619      	mov	r1, r3
 8002068:	4824      	ldr	r0, [pc, #144]	; (80020fc <ENCODER2_Init+0x11c>)
 800206a:	f7fe fbd9 	bl	8000820 <HAL_GPIO_Init>

	TIM2_Handler.Instance = TIM2;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <ENCODER2_Init+0x120>)
 8002070:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002074:	601a      	str	r2, [r3, #0]
	TIM2_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <ENCODER2_Init+0x120>)
 8002078:	2280      	movs	r2, #128	; 0x80
 800207a:	619a      	str	r2, [r3, #24]
	TIM2_Handler.Init.ClockDivision = 0;
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <ENCODER2_Init+0x120>)
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
	TIM2_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <ENCODER2_Init+0x120>)
 8002084:	2200      	movs	r2, #0
 8002086:	609a      	str	r2, [r3, #8]
	TIM2_Handler.Init.Prescaler = 0;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <ENCODER2_Init+0x120>)
 800208a:	2200      	movs	r2, #0
 800208c:	605a      	str	r2, [r3, #4]
	TIM2_Handler.Init.Period = 0xffffffff;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <ENCODER2_Init+0x120>)
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	60da      	str	r2, [r3, #12]
	TIM2_Handler.Init.RepetitionCounter = 0;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <ENCODER2_Init+0x120>)
 8002098:	2200      	movs	r2, #0
 800209a:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(&TIM2_Handler);
 800209c:	4818      	ldr	r0, [pc, #96]	; (8002100 <ENCODER2_Init+0x120>)
 800209e:	f7ff f9eb 	bl	8001478 <HAL_TIM_Base_Init>

	ENCODER_InitStructure.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a2:	2303      	movs	r3, #3
 80020a4:	613b      	str	r3, [r7, #16]
	ENCODER_InitStructure.IC1Filter = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
	ENCODER_InitStructure.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
	ENCODER_InitStructure.IC1Prescaler = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
	ENCODER_InitStructure.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
	ENCODER_InitStructure.IC2Filter = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	633b      	str	r3, [r7, #48]	; 0x30
	ENCODER_InitStructure.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
	ENCODER_InitStructure.IC2Prescaler = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	ENCODER_InitStructure.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020c2:	2301      	movs	r3, #1
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28

	HAL_TIM_Encoder_Init(&TIM2_Handler,&ENCODER_InitStructure);
 80020c6:	f107 0310 	add.w	r3, r7, #16
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <ENCODER2_Init+0x120>)
 80020ce:	f7ff fa77 	bl	80015c0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SET_COUNTER(&TIM2_Handler,200);
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <ENCODER2_Init+0x120>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	22c8      	movs	r2, #200	; 0xc8
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TIM2_Handler,TIM_CHANNEL_1);
 80020da:	2100      	movs	r1, #0
 80020dc:	4808      	ldr	r0, [pc, #32]	; (8002100 <ENCODER2_Init+0x120>)
 80020de:	f7ff fb0b 	bl	80016f8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TIM2_Handler,TIM_CHANNEL_2);
 80020e2:	2104      	movs	r1, #4
 80020e4:	4806      	ldr	r0, [pc, #24]	; (8002100 <ENCODER2_Init+0x120>)
 80020e6:	f7ff fb07 	bl	80016f8 <HAL_TIM_Encoder_Start>
}
 80020ea:	bf00      	nop
 80020ec:	3748      	adds	r7, #72	; 0x48
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020400 	.word	0x40020400
 80020fc:	40020000 	.word	0x40020000
 8002100:	20020064 	.word	0x20020064

08002104 <ENCODER5_Init>:

void ENCODER5_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b090      	sub	sp, #64	; 0x40
 8002108:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_Encoder_InitTypeDef ENCODER_InitStructure;

	__HAL_RCC_TIM5_CLK_ENABLE();
 800210a:	4a34      	ldr	r2, [pc, #208]	; (80021dc <ENCODER5_Init+0xd8>)
 800210c:	4b33      	ldr	r3, [pc, #204]	; (80021dc <ENCODER5_Init+0xd8>)
 800210e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002110:	f043 0308 	orr.w	r3, r3, #8
 8002114:	6413      	str	r3, [r2, #64]	; 0x40
 8002116:	4b31      	ldr	r3, [pc, #196]	; (80021dc <ENCODER5_Init+0xd8>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002122:	4a2e      	ldr	r2, [pc, #184]	; (80021dc <ENCODER5_Init+0xd8>)
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <ENCODER5_Init+0xd8>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b2b      	ldr	r3, [pc, #172]	; (80021dc <ENCODER5_Init+0xd8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800213a:	2303      	movs	r3, #3
 800213c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800213e:	2302      	movs	r3, #2
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Alternate = GPIO_AF2_TIM5;
 8002142:	2302      	movs	r3, #2
 8002144:	63fb      	str	r3, [r7, #60]	; 0x3c
	GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002146:	2301      	movs	r3, #1
 8002148:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOA,&GPIO_InitStructure);
 800214e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002152:	4619      	mov	r1, r3
 8002154:	4822      	ldr	r0, [pc, #136]	; (80021e0 <ENCODER5_Init+0xdc>)
 8002156:	f7fe fb63 	bl	8000820 <HAL_GPIO_Init>

	TIM5_Handler.Instance = TIM5;
 800215a:	4b22      	ldr	r3, [pc, #136]	; (80021e4 <ENCODER5_Init+0xe0>)
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <ENCODER5_Init+0xe4>)
 800215e:	601a      	str	r2, [r3, #0]
	TIM5_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002160:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <ENCODER5_Init+0xe0>)
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	619a      	str	r2, [r3, #24]
	TIM5_Handler.Init.ClockDivision = 0;
 8002166:	4b1f      	ldr	r3, [pc, #124]	; (80021e4 <ENCODER5_Init+0xe0>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
	TIM5_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 800216c:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <ENCODER5_Init+0xe0>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
	TIM5_Handler.Init.Prescaler = 0;
 8002172:	4b1c      	ldr	r3, [pc, #112]	; (80021e4 <ENCODER5_Init+0xe0>)
 8002174:	2200      	movs	r2, #0
 8002176:	605a      	str	r2, [r3, #4]
	TIM5_Handler.Init.Period = 0xffffffff;
 8002178:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <ENCODER5_Init+0xe0>)
 800217a:	f04f 32ff 	mov.w	r2, #4294967295
 800217e:	60da      	str	r2, [r3, #12]
	TIM5_Handler.Init.RepetitionCounter = 0;
 8002180:	4b18      	ldr	r3, [pc, #96]	; (80021e4 <ENCODER5_Init+0xe0>)
 8002182:	2200      	movs	r2, #0
 8002184:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(&TIM5_Handler);
 8002186:	4817      	ldr	r0, [pc, #92]	; (80021e4 <ENCODER5_Init+0xe0>)
 8002188:	f7ff f976 	bl	8001478 <HAL_TIM_Base_Init>

	ENCODER_InitStructure.EncoderMode = TIM_ENCODERMODE_TI12;
 800218c:	2303      	movs	r3, #3
 800218e:	60bb      	str	r3, [r7, #8]
	ENCODER_InitStructure.IC1Filter = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
	ENCODER_InitStructure.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002194:	2300      	movs	r3, #0
 8002196:	60fb      	str	r3, [r7, #12]
	ENCODER_InitStructure.IC1Prescaler = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
	ENCODER_InitStructure.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800219c:	2301      	movs	r3, #1
 800219e:	613b      	str	r3, [r7, #16]
	ENCODER_InitStructure.IC2Filter = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	62bb      	str	r3, [r7, #40]	; 0x28
	ENCODER_InitStructure.IC2Polarity = TIM_ICPOLARITY_RISING;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
	ENCODER_InitStructure.IC2Prescaler = 0;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
	ENCODER_InitStructure.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80021ac:	2301      	movs	r3, #1
 80021ae:	623b      	str	r3, [r7, #32]

	HAL_TIM_Encoder_Init(&TIM5_Handler,&ENCODER_InitStructure);
 80021b0:	f107 0308 	add.w	r3, r7, #8
 80021b4:	4619      	mov	r1, r3
 80021b6:	480b      	ldr	r0, [pc, #44]	; (80021e4 <ENCODER5_Init+0xe0>)
 80021b8:	f7ff fa02 	bl	80015c0 <HAL_TIM_Encoder_Init>

	__HAL_TIM_SET_COUNTER(&TIM5_Handler,200);
 80021bc:	4b09      	ldr	r3, [pc, #36]	; (80021e4 <ENCODER5_Init+0xe0>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	22c8      	movs	r2, #200	; 0xc8
 80021c2:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&TIM5_Handler,TIM_CHANNEL_1);
 80021c4:	2100      	movs	r1, #0
 80021c6:	4807      	ldr	r0, [pc, #28]	; (80021e4 <ENCODER5_Init+0xe0>)
 80021c8:	f7ff fa96 	bl	80016f8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&TIM5_Handler,TIM_CHANNEL_2);
 80021cc:	2104      	movs	r1, #4
 80021ce:	4805      	ldr	r0, [pc, #20]	; (80021e4 <ENCODER5_Init+0xe0>)
 80021d0:	f7ff fa92 	bl	80016f8 <HAL_TIM_Encoder_Start>
}
 80021d4:	bf00      	nop
 80021d6:	3740      	adds	r7, #64	; 0x40
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020000 	.word	0x40020000
 80021e4:	200200a4 	.word	0x200200a4
 80021e8:	40000c00 	.word	0x40000c00

080021ec <PWM1_Init>:
 *      Author: RICHARD
 */
#include "pwm.h"

void PWM1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08e      	sub	sp, #56	; 0x38
 80021f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	TIM_OC_InitTypeDef TIM_OCInitStructure;

	__HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4a44      	ldr	r2, [pc, #272]	; (8002304 <PWM1_Init+0x118>)
 80021f4:	4b43      	ldr	r3, [pc, #268]	; (8002304 <PWM1_Init+0x118>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	6453      	str	r3, [r2, #68]	; 0x44
 80021fe:	4b41      	ldr	r3, [pc, #260]	; (8002304 <PWM1_Init+0x118>)
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	607b      	str	r3, [r7, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800220a:	4a3e      	ldr	r2, [pc, #248]	; (8002304 <PWM1_Init+0x118>)
 800220c:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <PWM1_Init+0x118>)
 800220e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002210:	f043 0310 	orr.w	r3, r3, #16
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b3b      	ldr	r3, [pc, #236]	; (8002304 <PWM1_Init+0x118>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = GPIO_PIN_9 | GPIO_PIN_11 | GPIO_PIN_13 | GPIO_PIN_14;
 8002222:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8002226:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002228:	2302      	movs	r3, #2
 800222a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Alternate = GPIO_AF1_TIM1;
 800222c:	2301      	movs	r3, #1
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002234:	2303      	movs	r3, #3
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE,&GPIO_InitStructure);
 8002238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800223c:	4619      	mov	r1, r3
 800223e:	4832      	ldr	r0, [pc, #200]	; (8002308 <PWM1_Init+0x11c>)
 8002240:	f7fe faee 	bl	8000820 <HAL_GPIO_Init>

	TIM1_Handler.Instance = TIM1;
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <PWM1_Init+0x120>)
 8002246:	4a32      	ldr	r2, [pc, #200]	; (8002310 <PWM1_Init+0x124>)
 8002248:	601a      	str	r2, [r3, #0]
	TIM1_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <PWM1_Init+0x120>)
 800224c:	2280      	movs	r2, #128	; 0x80
 800224e:	619a      	str	r2, [r3, #24]
	TIM1_Handler.Init.ClockDivision = 0;
 8002250:	4b2e      	ldr	r3, [pc, #184]	; (800230c <PWM1_Init+0x120>)
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
	TIM1_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002256:	4b2d      	ldr	r3, [pc, #180]	; (800230c <PWM1_Init+0x120>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
	TIM1_Handler.Init.Prescaler = 10 - 1;
 800225c:	4b2b      	ldr	r3, [pc, #172]	; (800230c <PWM1_Init+0x120>)
 800225e:	2209      	movs	r2, #9
 8002260:	605a      	str	r2, [r3, #4]
	TIM1_Handler.Init.Period = 1000;
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <PWM1_Init+0x120>)
 8002264:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002268:	60da      	str	r2, [r3, #12]
	TIM1_Handler.Init.RepetitionCounter = 0;
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <PWM1_Init+0x120>)
 800226c:	2200      	movs	r2, #0
 800226e:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(&TIM1_Handler);
 8002270:	4826      	ldr	r0, [pc, #152]	; (800230c <PWM1_Init+0x120>)
 8002272:	f7ff f901 	bl	8001478 <HAL_TIM_Base_Init>

	TIM_OCInitStructure.OCFastMode = TIM_OCFAST_DISABLE;
 8002276:	2300      	movs	r3, #0
 8002278:	61bb      	str	r3, [r7, #24]
	TIM_OCInitStructure.OCIdleState = TIM_OCIDLESTATE_SET;
 800227a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800227e:	61fb      	str	r3, [r7, #28]
	TIM_OCInitStructure.OCMode = TIM_OCMODE_PWM1;
 8002280:	2360      	movs	r3, #96	; 0x60
 8002282:	60bb      	str	r3, [r7, #8]
	TIM_OCInitStructure.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
	TIM_OCInitStructure.Pulse = 0;
 8002288:	2300      	movs	r3, #0
 800228a:	60fb      	str	r3, [r7, #12]

	HAL_TIM_PWM_ConfigChannel(&TIM1_Handler,&TIM_OCInitStructure,TIM_CHANNEL_1);
 800228c:	f107 0308 	add.w	r3, r7, #8
 8002290:	2200      	movs	r2, #0
 8002292:	4619      	mov	r1, r3
 8002294:	481d      	ldr	r0, [pc, #116]	; (800230c <PWM1_Init+0x120>)
 8002296:	f7ff fa67 	bl	8001768 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&TIM1_Handler,&TIM_OCInitStructure,TIM_CHANNEL_2);
 800229a:	f107 0308 	add.w	r3, r7, #8
 800229e:	2204      	movs	r2, #4
 80022a0:	4619      	mov	r1, r3
 80022a2:	481a      	ldr	r0, [pc, #104]	; (800230c <PWM1_Init+0x120>)
 80022a4:	f7ff fa60 	bl	8001768 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&TIM1_Handler,&TIM_OCInitStructure,TIM_CHANNEL_3);
 80022a8:	f107 0308 	add.w	r3, r7, #8
 80022ac:	2208      	movs	r2, #8
 80022ae:	4619      	mov	r1, r3
 80022b0:	4816      	ldr	r0, [pc, #88]	; (800230c <PWM1_Init+0x120>)
 80022b2:	f7ff fa59 	bl	8001768 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_PWM_ConfigChannel(&TIM1_Handler,&TIM_OCInitStructure,TIM_CHANNEL_4);
 80022b6:	f107 0308 	add.w	r3, r7, #8
 80022ba:	220c      	movs	r2, #12
 80022bc:	4619      	mov	r1, r3
 80022be:	4813      	ldr	r0, [pc, #76]	; (800230c <PWM1_Init+0x120>)
 80022c0:	f7ff fa52 	bl	8001768 <HAL_TIM_PWM_ConfigChannel>

	TIM1->CCR1 = 0;
 80022c4:	4b12      	ldr	r3, [pc, #72]	; (8002310 <PWM1_Init+0x124>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 80022ca:	4b11      	ldr	r3, [pc, #68]	; (8002310 <PWM1_Init+0x124>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <PWM1_Init+0x124>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM1->CCR4 = 0;
 80022d6:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <PWM1_Init+0x124>)
 80022d8:	2200      	movs	r2, #0
 80022da:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_TIM_PWM_Start(&TIM1_Handler,TIM_CHANNEL_1);
 80022dc:	2100      	movs	r1, #0
 80022de:	480b      	ldr	r0, [pc, #44]	; (800230c <PWM1_Init+0x120>)
 80022e0:	f7ff f92a 	bl	8001538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&TIM1_Handler,TIM_CHANNEL_2);
 80022e4:	2104      	movs	r1, #4
 80022e6:	4809      	ldr	r0, [pc, #36]	; (800230c <PWM1_Init+0x120>)
 80022e8:	f7ff f926 	bl	8001538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&TIM1_Handler,TIM_CHANNEL_3);
 80022ec:	2108      	movs	r1, #8
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <PWM1_Init+0x120>)
 80022f0:	f7ff f922 	bl	8001538 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&TIM1_Handler,TIM_CHANNEL_4);
 80022f4:	210c      	movs	r1, #12
 80022f6:	4805      	ldr	r0, [pc, #20]	; (800230c <PWM1_Init+0x120>)
 80022f8:	f7ff f91e 	bl	8001538 <HAL_TIM_PWM_Start>
}
 80022fc:	bf00      	nop
 80022fe:	3738      	adds	r7, #56	; 0x38
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	40021000 	.word	0x40021000
 800230c:	200200e4 	.word	0x200200e4
 8002310:	40010000 	.word	0x40010000

08002314 <PWM_Control>:

void PWM_Control(int32_t Duty)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	if(Duty > 0)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	dd06      	ble.n	8002330 <PWM_Control+0x1c>
	{
		TIM1->CCR2 = 0;
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <PWM_Control+0x40>)
 8002324:	2200      	movs	r2, #0
 8002326:	639a      	str	r2, [r3, #56]	; 0x38
		TIM1->CCR3 = Duty;
 8002328:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <PWM_Control+0x40>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	63d3      	str	r3, [r2, #60]	; 0x3c
	else if (Duty < 0)
	{
		TIM1->CCR2 = abs(Duty);
		TIM1->CCR3 = 0;
	}
}
 800232e:	e00b      	b.n	8002348 <PWM_Control+0x34>
	else if (Duty < 0)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	da08      	bge.n	8002348 <PWM_Control+0x34>
		TIM1->CCR2 = abs(Duty);
 8002336:	4a07      	ldr	r2, [pc, #28]	; (8002354 <PWM_Control+0x40>)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	bfb8      	it	lt
 800233e:	425b      	neglt	r3, r3
 8002340:	6393      	str	r3, [r2, #56]	; 0x38
		TIM1->CCR3 = 0;
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <PWM_Control+0x40>)
 8002344:	2200      	movs	r2, #0
 8002346:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	40010000 	.word	0x40010000

08002358 <TIMER7_Init>:
 *      Author: RICHARD
 */
#include "timer.h"

void TIMER7_Init(uint16_t Time)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
	__HAL_RCC_TIM7_CLK_ENABLE();
 8002362:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <TIMER7_Init+0x80>)
 8002364:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <TIMER7_Init+0x80>)
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f043 0320 	orr.w	r3, r3, #32
 800236c:	6413      	str	r3, [r2, #64]	; 0x40
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <TIMER7_Init+0x80>)
 8002370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	68fb      	ldr	r3, [r7, #12]

	TIM7_Handler.Instance = TIM7;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <TIMER7_Init+0x84>)
 800237c:	4a18      	ldr	r2, [pc, #96]	; (80023e0 <TIMER7_Init+0x88>)
 800237e:	601a      	str	r2, [r3, #0]
	TIM7_Handler.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <TIMER7_Init+0x84>)
 8002382:	2280      	movs	r2, #128	; 0x80
 8002384:	619a      	str	r2, [r3, #24]
	TIM7_Handler.Init.ClockDivision = 0;
 8002386:	4b15      	ldr	r3, [pc, #84]	; (80023dc <TIMER7_Init+0x84>)
 8002388:	2200      	movs	r2, #0
 800238a:	611a      	str	r2, [r3, #16]
	TIM7_Handler.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b13      	ldr	r3, [pc, #76]	; (80023dc <TIMER7_Init+0x84>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
	TIM7_Handler.Init.Prescaler = 108 - 1;
 8002392:	4b12      	ldr	r3, [pc, #72]	; (80023dc <TIMER7_Init+0x84>)
 8002394:	226b      	movs	r2, #107	; 0x6b
 8002396:	605a      	str	r2, [r3, #4]
	TIM7_Handler.Init.Period = Time;
 8002398:	88fb      	ldrh	r3, [r7, #6]
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <TIMER7_Init+0x84>)
 800239c:	60d3      	str	r3, [r2, #12]
	TIM7_Handler.Init.RepetitionCounter = 0;
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <TIMER7_Init+0x84>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Init(&TIM7_Handler);
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <TIMER7_Init+0x84>)
 80023a6:	f7ff f867 	bl	8001478 <HAL_TIM_Base_Init>

	__HAL_TIM_ENABLE_IT(&TIM7_Handler,TIM_IT_UPDATE);
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <TIMER7_Init+0x84>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a0b      	ldr	r2, [pc, #44]	; (80023dc <TIMER7_Init+0x84>)
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	68d2      	ldr	r2, [r2, #12]
 80023b4:	f042 0201 	orr.w	r2, r2, #1
 80023b8:	60da      	str	r2, [r3, #12]
	HAL_NVIC_SetPriority(TIM7_IRQn, 10, 0);
 80023ba:	2200      	movs	r2, #0
 80023bc:	210a      	movs	r1, #10
 80023be:	2037      	movs	r0, #55	; 0x37
 80023c0:	f7fe f9f7 	bl	80007b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80023c4:	2037      	movs	r0, #55	; 0x37
 80023c6:	f7fe fa10 	bl	80007ea <HAL_NVIC_EnableIRQ>

	HAL_TIM_Base_Start_IT(&TIM7_Handler);
 80023ca:	4804      	ldr	r0, [pc, #16]	; (80023dc <TIMER7_Init+0x84>)
 80023cc:	f7ff f88a 	bl	80014e4 <HAL_TIM_Base_Start_IT>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	40023800 	.word	0x40023800
 80023dc:	20020124 	.word	0x20020124
 80023e0:	40001400 	.word	0x40001400

080023e4 <SCB_EnableICache>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80023ec:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80023f0:	4b09      	ldr	r3, [pc, #36]	; (8002418 <SCB_EnableICache+0x34>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80023f8:	4a07      	ldr	r2, [pc, #28]	; (8002418 <SCB_EnableICache+0x34>)
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <SCB_EnableICache+0x34>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002402:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002404:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002408:	f3bf 8f6f 	isb	sy
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <SCB_EnableDCache>:
{
 800241c:	b480      	push	{r7}
 800241e:	b085      	sub	sp, #20
 8002420:	af00      	add	r7, sp, #0
    SCB->CSSELR = (0U << 1U) | 0U;          /* Level 1 data cache */
 8002422:	4b1d      	ldr	r3, [pc, #116]	; (8002498 <SCB_EnableDCache+0x7c>)
 8002424:	2200      	movs	r2, #0
 8002426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800242a:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800242e:	4b1a      	ldr	r3, [pc, #104]	; (8002498 <SCB_EnableDCache+0x7c>)
 8002430:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002434:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0b5b      	lsrs	r3, r3, #13
 800243a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800243e:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	08db      	lsrs	r3, r3, #3
 8002444:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002448:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800244a:	4913      	ldr	r1, [pc, #76]	; (8002498 <SCB_EnableDCache+0x7c>)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002454:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
      } while (ways--);
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	1e5a      	subs	r2, r3, #1
 8002464:	60ba      	str	r2, [r7, #8]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1ef      	bne.n	800244a <SCB_EnableDCache+0x2e>
    } while(sets--);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	1e5a      	subs	r2, r3, #1
 800246e:	60fa      	str	r2, [r7, #12]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1e5      	bne.n	8002440 <SCB_EnableDCache+0x24>
 8002474:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002478:	4a07      	ldr	r2, [pc, #28]	; (8002498 <SCB_EnableDCache+0x7c>)
 800247a:	4b07      	ldr	r3, [pc, #28]	; (8002498 <SCB_EnableDCache+0x7c>)
 800247c:	695b      	ldr	r3, [r3, #20]
 800247e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002482:	6153      	str	r3, [r2, #20]
 8002484:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002488:	f3bf 8f6f 	isb	sy
}
 800248c:	bf00      	nop
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000ed00 	.word	0xe000ed00

0800249c <DCL_runPID_C3>:
//! \param[in] yk   The measured feedback value
//! \param[in] lk   External output clamp flag
//! \return         The control effort
//!
static inline float32_t DCL_runPID_C3(DCL_PID *p, float32_t rk, float32_t yk, float32_t lk)
{
 800249c:	b480      	push	{r7}
 800249e:	b08d      	sub	sp, #52	; 0x34
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80024a8:	edc7 0a01 	vstr	s1, [r7, #4]
 80024ac:	ed87 1a00 	vstr	s2, [r7]
    float32_t v1, v4, v5, v6, v8, v9, v10, v12;

    v5 = rk - yk;
 80024b0:	ed97 7a02 	vldr	s14, [r7, #8]
 80024b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024bc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    v6 = v5 * p->Kp;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	ed93 7a00 	vldr	s14, [r3]
 80024c6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ce:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    v8 = v5 * p->Ki * p->i14 + p->i10;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	ed93 7a01 	vldr	s14, [r3, #4]
 80024d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80024dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80024e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	edd3 7a08 	vldr	s15, [r3, #32]
 80024f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    p->i10 = v8;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024fc:	621a      	str	r2, [r3, #32]
    v1 = v5 * p->Kd * p->c1;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	ed93 7a02 	vldr	s14, [r3, #8]
 8002504:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002508:	ee27 7a27 	vmul.f32	s14, s14, s15
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002516:	edc7 7a08 	vstr	s15, [r7, #32]
    v4 = v1 - p->d2 - p->d3;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002520:	ed97 7a08 	vldr	s14, [r7, #32]
 8002524:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	edd3 7a07 	vldr	s15, [r3, #28]
 800252e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
    p->d2 = v1;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	6a3a      	ldr	r2, [r7, #32]
 800253a:	619a      	str	r2, [r3, #24]
    p->d3 = v4 * p->c2;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002542:	edd7 7a07 	vldr	s15, [r7, #28]
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	edc3 7a07 	vstr	s15, [r3, #28]
    v9 = v6 + v8 + v4;
 8002550:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8002554:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002564:	edc7 7a06 	vstr	s15, [r7, #24]
    v10 = (v9 > p->Umax) ? p->Umax : v9;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800256e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002572:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257a:	d502      	bpl.n	8002582 <DCL_runPID_C3+0xe6>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002580:	e000      	b.n	8002584 <DCL_runPID_C3+0xe8>
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	617b      	str	r3, [r7, #20]
    v10 = (v10 < p->Umin) ? p->Umin : v10;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800258c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	dd02      	ble.n	80025a0 <DCL_runPID_C3+0x104>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	e000      	b.n	80025a2 <DCL_runPID_C3+0x106>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	617b      	str	r3, [r7, #20]
    v12 = (v10 == v9) ? 1.0f : 0.0f;
 80025a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80025a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80025ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	d102      	bne.n	80025bc <DCL_runPID_C3+0x120>
 80025b6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025ba:	e001      	b.n	80025c0 <DCL_runPID_C3+0x124>
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	613b      	str	r3, [r7, #16]
    p->i14 = v12 * lk;
 80025c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80025c6:	edd7 7a00 	vldr	s15, [r7]
 80025ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

    return(v10);
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	ee07 3a90 	vmov	s15, r3
}
 80025da:	eeb0 0a67 	vmov.f32	s0, s15
 80025de:	3734      	adds	r7, #52	; 0x34
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <main>:

/* Private functions */


int main(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80025ec:	4a19      	ldr	r2, [pc, #100]	; (8002654 <main+0x6c>)
 80025ee:	4b19      	ldr	r3, [pc, #100]	; (8002654 <main+0x6c>)
 80025f0:	68db      	ldr	r3, [r3, #12]
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025f6:	60d3      	str	r3, [r2, #12]
	DWT->LAR = 0xC5ACCE55;
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <main+0x70>)
 80025fa:	4a18      	ldr	r2, [pc, #96]	; (800265c <main+0x74>)
 80025fc:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; // Enable DWT
 8002600:	4a15      	ldr	r2, [pc, #84]	; (8002658 <main+0x70>)
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <main+0x70>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f043 0301 	orr.w	r3, r3, #1
 800260a:	6013      	str	r3, [r2, #0]

	SCB_EnableDCache();
 800260c:	f7ff ff06 	bl	800241c <SCB_EnableDCache>
	SCB_EnableICache();
 8002610:	f7ff fee8 	bl	80023e4 <SCB_EnableICache>

	HAL_Init();
 8002614:	f7fd ff98 	bl	8000548 <HAL_Init>
	SystemClock_Config();
 8002618:	f000 f8a2 	bl	8002760 <SystemClock_Config>

	LED_Init();
 800261c:	f000 f87c 	bl	8002718 <LED_Init>
	PWM1_Init();
 8002620:	f7ff fde4 	bl	80021ec <PWM1_Init>
	ENCODER2_Init();
 8002624:	f7ff fcdc 	bl	8001fe0 <ENCODER2_Init>
	ENCODER5_Init();
 8002628:	f7ff fd6c 	bl	8002104 <ENCODER5_Init>
	TIMER7_Init(50);
 800262c:	2032      	movs	r0, #50	; 0x32
 800262e:	f7ff fe93 	bl	8002358 <TIMER7_Init>

	PID_MOTOR.Kp = 15.2f;
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <main+0x78>)
 8002634:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <main+0x7c>)
 8002636:	601a      	str	r2, [r3, #0]
	PID_MOTOR.Ki = 2.5f;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <main+0x78>)
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <main+0x80>)
 800263c:	605a      	str	r2, [r3, #4]
	PID_MOTOR.Kd = 0.001f;
 800263e:	4b08      	ldr	r3, [pc, #32]	; (8002660 <main+0x78>)
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <main+0x84>)
 8002642:	609a      	str	r2, [r3, #8]
	PID_MOTOR.Umax = 1000.0f;
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <main+0x78>)
 8002646:	4a0a      	ldr	r2, [pc, #40]	; (8002670 <main+0x88>)
 8002648:	629a      	str	r2, [r3, #40]	; 0x28
	PID_MOTOR.Umin = -1000.0f;
 800264a:	4b05      	ldr	r3, [pc, #20]	; (8002660 <main+0x78>)
 800264c:	4a09      	ldr	r2, [pc, #36]	; (8002674 <main+0x8c>)
 800264e:	62da      	str	r2, [r3, #44]	; 0x2c



	while(1)
 8002650:	e7fe      	b.n	8002650 <main+0x68>
 8002652:	bf00      	nop
 8002654:	e000edf0 	.word	0xe000edf0
 8002658:	e0001000 	.word	0xe0001000
 800265c:	c5acce55 	.word	0xc5acce55
 8002660:	20020008 	.word	0x20020008
 8002664:	41733333 	.word	0x41733333
 8002668:	40200000 	.word	0x40200000
 800266c:	3a83126f 	.word	0x3a83126f
 8002670:	447a0000 	.word	0x447a0000
 8002674:	c47a0000 	.word	0xc47a0000

08002678 <TIM7_IRQHandler>:
//		result = stop - start;
	}
}

void TIM7_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
	__HAL_TIM_CLEAR_IT(&TIM7_Handler,TIM_IT_UPDATE);
 800267c:	4b04      	ldr	r3, [pc, #16]	; (8002690 <TIM7_IRQHandler+0x18>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0201 	mvn.w	r2, #1
 8002684:	611a      	str	r2, [r3, #16]
	PID_POSITION();
 8002686:	f000 f805 	bl	8002694 <PID_POSITION>
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	20020124 	.word	0x20020124

08002694 <PID_POSITION>:

static inline void PID_POSITION(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	input = TIM2->CNT;
 8002698:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <PID_POSITION+0x6c>)
 80026a8:	edc3 7a00 	vstr	s15, [r3]
	setpoint = __HAL_TIM_GET_COUNTER(&TIM5_Handler);
 80026ac:	4b15      	ldr	r3, [pc, #84]	; (8002704 <PID_POSITION+0x70>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ba:	4b13      	ldr	r3, [pc, #76]	; (8002708 <PID_POSITION+0x74>)
 80026bc:	edc3 7a00 	vstr	s15, [r3]
	output = DCL_runPID_C3(&PID_MOTOR, setpoint, input, 0.001f);
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <PID_POSITION+0x74>)
 80026c2:	edd3 7a00 	vldr	s15, [r3]
 80026c6:	4b0e      	ldr	r3, [pc, #56]	; (8002700 <PID_POSITION+0x6c>)
 80026c8:	ed93 7a00 	vldr	s14, [r3]
 80026cc:	ed9f 1a0f 	vldr	s2, [pc, #60]	; 800270c <PID_POSITION+0x78>
 80026d0:	eef0 0a47 	vmov.f32	s1, s14
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	480d      	ldr	r0, [pc, #52]	; (8002710 <PID_POSITION+0x7c>)
 80026da:	f7ff fedf 	bl	800249c <DCL_runPID_C3>
 80026de:	eef0 7a40 	vmov.f32	s15, s0
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <PID_POSITION+0x80>)
 80026e4:	edc3 7a00 	vstr	s15, [r3]
	PWM_Control((int32_t)output);
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <PID_POSITION+0x80>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f2:	ee17 0a90 	vmov	r0, s15
 80026f6:	f7ff fe0d 	bl	8002314 <PWM_Control>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	2002016c 	.word	0x2002016c
 8002704:	200200a4 	.word	0x200200a4
 8002708:	20020168 	.word	0x20020168
 800270c:	3a83126f 	.word	0x3a83126f
 8002710:	20020008 	.word	0x20020008
 8002714:	20020164 	.word	0x20020164

08002718 <LED_Init>:

void LED_Init(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <LED_Init+0x40>)
 8002720:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <LED_Init+0x40>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002724:	f043 0302 	orr.w	r3, r3, #2
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <LED_Init+0x40>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStructure.Pin = GPIO_PIN_7;
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	607b      	str	r3, [r7, #4]
	GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 800273a:	2301      	movs	r3, #1
 800273c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB,&GPIO_InitStructure);
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	4619      	mov	r1, r3
 800274a:	4804      	ldr	r0, [pc, #16]	; (800275c <LED_Init+0x44>)
 800274c:	f7fe f868 	bl	8000820 <HAL_GPIO_Init>
}
 8002750:	bf00      	nop
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	40020400 	.word	0x40020400

08002760 <SystemClock_Config>:
  *            Flash Latency(WS)              = 7
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b094      	sub	sp, #80	; 0x50
 8002764:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;


  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4a25      	ldr	r2, [pc, #148]	; (80027fc <SystemClock_Config+0x9c>)
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <SystemClock_Config+0x9c>)
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002770:	6413      	str	r3, [r2, #64]	; 0x40
 8002772:	4b22      	ldr	r3, [pc, #136]	; (80027fc <SystemClock_Config+0x9c>)
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800277e:	4a20      	ldr	r2, [pc, #128]	; (8002800 <SystemClock_Config+0xa0>)
 8002780:	4b1f      	ldr	r3, [pc, #124]	; (8002800 <SystemClock_Config+0xa0>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <SystemClock_Config+0xa0>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002792:	603b      	str	r3, [r7, #0]
 8002794:	683b      	ldr	r3, [r7, #0]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002796:	2301      	movs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800279a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279e:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027a0:	2302      	movs	r3, #2
 80027a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = 8;
 80027aa:	2308      	movs	r3, #8
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 432;
 80027ae:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80027b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80027b4:	2302      	movs	r3, #2
 80027b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80027b8:	2309      	movs	r3, #9
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = 7;
 80027bc:	2307      	movs	r3, #7
 80027be:	63bb      	str	r3, [r7, #56]	; 0x38

  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80027c0:	f107 0308 	add.w	r3, r7, #8
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe fa25 	bl	8000c14 <HAL_RCC_OscConfig>


  /* Activate the OverDrive to reach the 216 MHz Frequency */
  HAL_PWREx_EnableOverDrive();
 80027ca:	f7fe f9d3 	bl	8000b74 <HAL_PWREx_EnableOverDrive>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80027ce:	230f      	movs	r3, #15
 80027d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027d2:	2302      	movs	r3, #2
 80027d4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027d6:	2300      	movs	r3, #0
 80027d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027e4:	64fb      	str	r3, [r7, #76]	; 0x4c

  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 80027e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027ea:	2107      	movs	r1, #7
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fe fc83 	bl	80010f8 <HAL_RCC_ClockConfig>

}
 80027f2:	bf00      	nop
 80027f4:	3750      	adds	r7, #80	; 0x50
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023800 	.word	0x40023800
 8002800:	40007000 	.word	0x40007000

08002804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800283c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002808:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800280a:	e003      	b.n	8002814 <LoopCopyDataInit>

0800280c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800280e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002810:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002812:	3104      	adds	r1, #4

08002814 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002814:	480b      	ldr	r0, [pc, #44]	; (8002844 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002816:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002818:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800281a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800281c:	d3f6      	bcc.n	800280c <CopyDataInit>
  ldr  r2, =_sbss
 800281e:	4a0b      	ldr	r2, [pc, #44]	; (800284c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002820:	e002      	b.n	8002828 <LoopFillZerobss>

08002822 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002822:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002824:	f842 3b04 	str.w	r3, [r2], #4

08002828 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800282a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800282c:	d3f9      	bcc.n	8002822 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800282e:	f000 f849 	bl	80028c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002832:	f000 f87d 	bl	8002930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002836:	f7ff fed7 	bl	80025e8 <main>
  bx  lr    
 800283a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800283c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8002840:	080029b0 	.word	0x080029b0
  ldr  r0, =_sdata
 8002844:	20020000 	.word	0x20020000
  ldr  r3, =_edata
 8002848:	20020040 	.word	0x20020040
  ldr  r2, =_sbss
 800284c:	20020040 	.word	0x20020040
  ldr  r3, = _ebss
 8002850:	2002017c 	.word	0x2002017c

08002854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002854:	e7fe      	b.n	8002854 <ADC_IRQHandler>

08002856 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
}
 800285a:	bf00      	nop
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002868:	e7fe      	b.n	8002868 <HardFault_Handler+0x4>

0800286a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800286a:	b480      	push	{r7}
 800286c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800286e:	e7fe      	b.n	800286e <MemManage_Handler+0x4>

08002870 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002874:	e7fe      	b.n	8002874 <BusFault_Handler+0x4>

08002876 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002876:	b480      	push	{r7}
 8002878:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800287a:	e7fe      	b.n	800287a <UsageFault_Handler+0x4>

0800287c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800288a:	b480      	push	{r7}
 800288c:	af00      	add	r7, sp, #0
}
 800288e:	bf00      	nop
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
}
 800289c:	bf00      	nop
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
//  HAL_IncTick();
	msTick++;
 80028ac:	4b04      	ldr	r3, [pc, #16]	; (80028c0 <SysTick_Handler+0x18>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	4a03      	ldr	r2, [pc, #12]	; (80028c0 <SysTick_Handler+0x18>)
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	2002005c 	.word	0x2002005c

080028c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028c8:	4a15      	ldr	r2, [pc, #84]	; (8002920 <SystemInit+0x5c>)
 80028ca:	4b15      	ldr	r3, [pc, #84]	; (8002920 <SystemInit+0x5c>)
 80028cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028d8:	4a12      	ldr	r2, [pc, #72]	; (8002924 <SystemInit+0x60>)
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <SystemInit+0x60>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028e4:	4b0f      	ldr	r3, [pc, #60]	; (8002924 <SystemInit+0x60>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80028ea:	490e      	ldr	r1, [pc, #56]	; (8002924 <SystemInit+0x60>)
 80028ec:	4b0d      	ldr	r3, [pc, #52]	; (8002924 <SystemInit+0x60>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <SystemInit+0x64>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80028f6:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <SystemInit+0x60>)
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <SystemInit+0x68>)
 80028fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80028fc:	4a09      	ldr	r2, [pc, #36]	; (8002924 <SystemInit+0x60>)
 80028fe:	4b09      	ldr	r3, [pc, #36]	; (8002924 <SystemInit+0x60>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002906:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <SystemInit+0x60>)
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <SystemInit+0x5c>)
 8002910:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002914:	609a      	str	r2, [r3, #8]
#endif
}
 8002916:	bf00      	nop
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00
 8002924:	40023800 	.word	0x40023800
 8002928:	fef6ffff 	.word	0xfef6ffff
 800292c:	24003010 	.word	0x24003010

08002930 <__libc_init_array>:
 8002930:	b570      	push	{r4, r5, r6, lr}
 8002932:	4e0d      	ldr	r6, [pc, #52]	; (8002968 <__libc_init_array+0x38>)
 8002934:	4c0d      	ldr	r4, [pc, #52]	; (800296c <__libc_init_array+0x3c>)
 8002936:	1ba4      	subs	r4, r4, r6
 8002938:	10a4      	asrs	r4, r4, #2
 800293a:	2500      	movs	r5, #0
 800293c:	42a5      	cmp	r5, r4
 800293e:	d109      	bne.n	8002954 <__libc_init_array+0x24>
 8002940:	4e0b      	ldr	r6, [pc, #44]	; (8002970 <__libc_init_array+0x40>)
 8002942:	4c0c      	ldr	r4, [pc, #48]	; (8002974 <__libc_init_array+0x44>)
 8002944:	f000 f818 	bl	8002978 <_init>
 8002948:	1ba4      	subs	r4, r4, r6
 800294a:	10a4      	asrs	r4, r4, #2
 800294c:	2500      	movs	r5, #0
 800294e:	42a5      	cmp	r5, r4
 8002950:	d105      	bne.n	800295e <__libc_init_array+0x2e>
 8002952:	bd70      	pop	{r4, r5, r6, pc}
 8002954:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002958:	4798      	blx	r3
 800295a:	3501      	adds	r5, #1
 800295c:	e7ee      	b.n	800293c <__libc_init_array+0xc>
 800295e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002962:	4798      	blx	r3
 8002964:	3501      	adds	r5, #1
 8002966:	e7f2      	b.n	800294e <__libc_init_array+0x1e>
 8002968:	080029a8 	.word	0x080029a8
 800296c:	080029a8 	.word	0x080029a8
 8002970:	080029a8 	.word	0x080029a8
 8002974:	080029ac 	.word	0x080029ac

08002978 <_init>:
 8002978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297a:	bf00      	nop
 800297c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800297e:	bc08      	pop	{r3}
 8002980:	469e      	mov	lr, r3
 8002982:	4770      	bx	lr

08002984 <_fini>:
 8002984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002986:	bf00      	nop
 8002988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800298a:	bc08      	pop	{r3}
 800298c:	469e      	mov	lr, r3
 800298e:	4770      	bx	lr
